{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"github/","title":"Github","text":""},{"location":"github/#creating-a-github-account","title":"Creating a GitHub Account","text":"<p>TBD</p>"},{"location":"github/#creating-a-github-repository","title":"Creating a GitHub Repository","text":"<p>TBD</p>"},{"location":"github/#install-git-in-your-pc","title":"Install Git in Your PC","text":"<p>TBD</p>"},{"location":"github/#adding-your-pc-to-github","title":"Adding Your PC to GitHub","text":""},{"location":"github/#generate-ssh-key","title":"Generate SSH Key","text":"<ol> <li>Open Git Bash from Start Menu.</li> <li>Check if there are SSH keys already in your system under \".ssh\" folder, using below command in git bash. The \"-al\" argument is for listing all files, with a separate line for each file name.   <code>ls -al ~/.ssh</code></li> <li>If you see that a SSH key has already been created for the account that you want, you can skip this section and move to the next section.</li> <li>If you got an error saying that the .ssh folder doesn't exist, create it using below command. <code>mkdir .ssh</code></li> <li>Switch to the .ssh folder. <code>cd .ssh</code></li> <li>Create a SSH key in your system using below command. This command uses \"rsa\" algorithm, uses 4096 bits and uses email address as comment. Replace the email address with your email address. <code>ssh-keygen -t rsa -b 4096 -C youremail@example.com</code></li> <li>This would prompt for a file name. \"id_rsa\" would be the default file name. For using multiple accounts, its recommended to use an identifier along with the default name. Give a name that you can easily associate with the account. Eg: id_rsa_ <li>It would now prompt for a passphrase. Press enter twice if you would like to skip providing a passphrase.</li> <li>These steps now would have created the public and private key in the \".ssh\" folder. You can use \"ls\" command to list the files in the current directory and verify. <code>ls</code></li>"},{"location":"github/#add-your-private-ssh-key-to-ssh-agent","title":"Add Your Private SSH Key to SSH Agent","text":"<p>(May be, below are not needed. Confirm) 1. Ensure that you are in \".ssh\" folder by checking the present working directory command. <code>pwd</code> This would output something like <code>/c/Users/&lt;user_name&gt;/.ssh</code> 2. If you are not yet in the .ssh folder, use change directory to go to the \".ssh\" folder. <code>cd .ssh</code> 3. Start SSH Agent using below command. <code>eval \"$(ssh-agent -s)\"</code> 4. Add your SSH private key file, whose file name you had provided in the previous section.  <code>ssh-add id_rsa_&lt;github_username&gt;</code></p>"},{"location":"github/#add-your-public-ssh-key-to-github","title":"Add Your Public SSH Key to GitHub","text":"<ol> <li>The ssh keys that you have created would be at <code>C:\\Users\\&lt;user_name&gt;\\.ssh</code></li> <li>Go to above location and open the *.pub file in a text editor, which is your public key. Copy the contents of above file. </li> <li>Go to https://github.com/settings/keys and click on New SSH key. </li> <li>Give a name for your PC and paste the SSH key contents. Click Add SSH key.</li> </ol>"},{"location":"github/#add-identity-keys-to-ssh-config-file","title":"Add Identity Keys to SSH Config File","text":"<p>If you had opted to save the file with a custom name other than \"id_rsa\", you need to add those file names to .ssh config file. The file needs to be created at below location without any extension: <code>C:\\Users\\&lt;user_name&gt;\\.ssh\\config</code> In this file, add below contents, one line for id_rsa file that you have created: <code>IdentityFile ~/.ssh/id_rsa_github_username_1 IdentityFile ~/.ssh/id_rsa_github_username_2</code></p>"},{"location":"github/#override-user-name-and-email-for-each-repo","title":"Override User Name and Email for Each Repo","text":"<p>By default, git would use the global user name and email for all repositories. To view the global user name and email configuration, you can use the below command: <code>git config --global -l</code> If you would like to use a different user name or email for a particular repo, you can override it for each repository using below commands using git bash from your repository directory: <code>git config --local user.name your_name git config --local user.email your_name@domain.com</code></p>"},{"location":"github/#add-gpg-secret-key","title":"Add GPG Secret Key","text":"<p>If you get <code>gpg: signing failed: No secret key error: gpg failed to sign the data</code>, do the below steps: -   List the secret keys available in GPG. <code>gpg --list-secret-keys --keyid-format=long</code> -   Copy your key and set using below command: <code>git config --local user.signingkey your_key</code> Use --global if you would like to apply this for systemwide.</p>"},{"location":"github/#commit-your-changes","title":"Commit Your Changes","text":"<p>TBD</p>"},{"location":"github/#contributing-to-open-source-projects","title":"Contributing to Open Source Projects","text":"<ol> <li>Create a fork of the repo under your account</li> <li>Clone the above fork in your PC<ol> <li>git clone [url]</li> </ol> </li> <li>Create and checkout a new branch<ol> <li>git checkout -b [your-new-branch-name]</li> </ol> </li> <li>Make changes and commit with your signature<ol> <li>git commit -s -m [your commit message]</li> </ol> </li> <li>Push branch to your online repo<ol> <li>git push -u origin [your-new-branch-name]</li> </ol> </li> <li>Create a pull request with your new branch</li> </ol>"},{"location":"github/#tips","title":"Tips","text":"<ol> <li>If you are in a conflicted state and want to go with \"their\" version: git checkout --theirs . git add .</li> </ol>"}]}