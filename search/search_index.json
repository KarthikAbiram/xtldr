{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is xTLDR?","text":"<p>Goal</p> <p>The absolute fastest way to get started with X, where X can be anything.</p> <p>We want a beginner to quickly get started with a new concept or tech stack and save their time. </p> <p>xTLDR is the \"Too Long, Didn't Read\" summarized version of X, and beginner friendly. </p> <p>Light speed!</p>"},{"location":"algorithms/","title":"Algorithms","text":""},{"location":"algorithms/#the-algorithms","title":"The Algorithms","text":"<p>Contains the implementations of algorithms in various programming languages. You can either browse the different algorithms in The Algorithms website or at Github.</p> <p>Each Programming Language has its own repository where programmers contribute implementations of various algorithms under MIT License. Example: Algorithms for Python</p>"},{"location":"algorithms/#khan-academy","title":"Khan Academy","text":"<p>Algorithms at Khan Academy</p>"},{"location":"algorithms/#courses","title":"Courses","text":"<ol> <li>Algorithms, Part 1: Coursera, Princeton University</li> </ol>"},{"location":"azure/","title":"Azure","text":""},{"location":"azure/#azure-devops-for-beginners","title":"Azure DevOps for Beginners","text":"<ol> <li>Azure DevOps Tutorial for Beginners | CI/CD with Azure Pipelines - TechWorld with Nana</li> </ol>"},{"location":"azure/#azure-pipelines","title":"Azure Pipelines","text":"<p>Azure Pipelines</p>"},{"location":"bash/","title":"Bash","text":""},{"location":"bash/#general","title":"General","text":"<p>Use \u2191 and \u2193 arrows to naviage to the past bash commands</p>"},{"location":"bash/#navigating-directories","title":"Navigating Directories","text":"<p>Creating, navigating and deleting directories.</p> Command Description pwd Print Working Directory (Current Directory) ls List all files and folders in current directory cd MyFolder Navigate to \"MyFolder\". Tip: Use tab to autocomplete the folder name cd MyFolder1\\SubFolder1 Possible to navigate multiple levels cd D: Navigate to D drive cd .. Move back one directory level cd ~ Go to Home directory mkdir MyFolder Makes/Creates a folder called \"NewFolder\" mkdir -p MyFolder1/SubFolder1/ Makes/creates the directories and subdirectories required rm -rf MyFolder Use -rf flag in rm command to delete folder recursively"},{"location":"bash/#create-and-delete-files","title":"Create and Delete Files","text":"<p>Creating, viewing and deleting files.</p> Command Description touch MyNote.txt Creates a file called MyNote.txt in the current folder start MyNote.txt \"start\" is for Windows. For other OS, try open MyNote.txt rm MyNote.txt To delete/remove files rm * Removes all files in current folder cat filename.txt To view file contents directly in bash"},{"location":"bash/#cheat-sheet","title":"Cheat Sheet","text":"<ol> <li>Linux Cheat Sheet</li> <li>Red Hat Linux Cheat Sheet</li> <li>Learn Enough Command Line to Be Dangerous</li> </ol>"},{"location":"css/","title":"CSS","text":""},{"location":"css/#css-types","title":"CSS Types","text":"Type Description Inline CSS styles that is provided inside each HTML element Internal CSS style that is provided as part of  which is applied to the entire HTML page External External CSS file which can be referenced and used by multiple HTML files."},{"location":"css/#order-of-priority","title":"Order of Priority","text":"<p>More specific -&gt; Higher the priority. </p> <p>For example, when considering tag (like h, p), class and id selectors, the id selector has the highest priority, as its most specific among all three.</p> <p>Last specified rule overrides previous set rules.</p> <p>Inline CSS will trump internal and external CSS, since that would be the last that is getting applied. Priority between Internal CSS or External CSS would depend on, what is applied last among these. If internal CSS is set after linking the external CSS, internal CSS would have the priority.</p>"},{"location":"css/#css-selectors","title":"CSS Selectors","text":"Selector Format Description Tag <code>h1 {background: yellow;}</code> Tag Selectors (like h1, p, body) Class <code>.my-class-name {background: red;}</code> Class Selectors (custom, user defined classes, which can be applied to multiple HTML elements) ID <code>#my-id {background: brown;}</code> ID Selectors (specific CSS which targets a single individual HTML element)"},{"location":"css/#multiple-classes","title":"Multiple Classes","text":"<p>A single HTML element can have more than 1 class defined, like below.  <code>&lt;p class=\"red-text highlight\"&gt;&lt;/p&gt;</code> In this example, this are two CSS classes - \"red-text\" and \"highlight\". Properties of both these classes would be applied.</p>"},{"location":"css/#pseudo-class","title":"Pseudo Class","text":"<p>A pseudo-class is used to define a special state of an element. For example, it can be used to style an element when a user hovers over it.</p>"},{"location":"css/#box-model","title":"Box Model","text":"<p>Everything in a web page is a rectangle/box. </p>"},{"location":"css/#display-types","title":"Display Types","text":"Type Description Width Display: Block Occupies entire horizontal row  . Eg: h1, p, div Can't specify width Display: Inline Takes required width based on content. Multiple elements can occupy single row. Eg: span, a Can't specify width Display: Inline-Block Elements can occupy the same row, as well as ability to specify width Can specify width <p>Display: None vs Visibility: Hidden Both display: none and visibility: hidden, hides the element. But when display:none is used, it is as this the element is removed/deleted and other elements move in and occupy its space. </p> <p>When visibility:hidden is used, the element is removed but the space it was occupying will be vacant and other elements would not take its place.</p>"},{"location":"css/#positioning","title":"Positioning","text":"Position: StaticPosition: RelativePosition: AbsolutePosition: Fixed <p>Position the element based on the HTML flow/layout.</p> <p>Default positioning of CSS elements. </p> <p>Position an element relative to its \"static\" positioning, where the static positioning is defined by the HTML layout. </p> <p>After specifying the position as relative, we can use the properties like top, right, bottom, left to move the HTML element from its static position. </p> <p>Just setting position to relative without setting values to properties like top, right, bottom, left will not have any effect on the position of the element. There is also a valid use case for this, when the child elements position is made absolute (covered in next section).</p> <p>For example, to add a space of 200 px to the top of the element whose id is element-id:</p> <pre><code>#element-id {\nposition: relative;\ntop: 200px;\n}\n</code></pre> <p>One important thing to note is that, moving a position using relative property would not affect the positions of other elements in the web page. For example, if we are moving an element down by 200px, the element would now overlap with its bottom element.</p> <p>Position the element, relative to its parent element which is set to relative. </p> <p>If the parent element position is not set to relative, it will traverse to its parent, to see if that or its parent is relative and use that for absolute positioning. If it doesn't find anything, it will finally use the absolute position, with respect to the body element.</p> <p>If the parent element is the body, then this position would make it appear as what we would call as absolute positioning.</p> <p>When an element's position is made absolute, the entire page layout is redrawn as if the element is removed. Hence, other elements move in and occupy its space.</p> <p>The element will stay at fixed position in the screen, even when user scrolls.</p>"},{"location":"css/#centering-a-div","title":"Centering a div","text":"<p>One way is to, make text-align property of parent element to be center, to make all child elements to be center. <pre><code>body {\n  text-align:center;\n}\n</code></pre></p> <p>This would not work with those child elements, which has width property. When an element has width, you can use margin to auto to center the element as below. <pre><code>container {\n  width: 600px;\n  height: 300px;\n}\n</code></pre></p>"},{"location":"css/#sizing","title":"Sizing","text":"Unit Description px Pixels. Absolute units, doesn't change even when user changes the font size to be larger in browser settings. vh View screen height. 100vh refers to the 100% height of the view screen. vw View screen width, similar to vh. 100vw refers to 100% width of the view screen. % Percentage. 100% refers to the original size. For text, it corresponds to 16px. em 1em refers to the size of m. Cascades. If the body font size is 2em and a child font size is 3em, the size applied would be 6em. rem Root-em. To avoid cascading, use 'rem', where we are explicitly specifying the size to be relative to the root 'em'. 1 rem = 16px."},{"location":"css/#css-useful-links","title":"CSS Useful Links","text":"<ol> <li>Align Elements Side by Side</li> </ol>"},{"location":"css/#useful-resources","title":"Useful Resources","text":"<ol> <li>Devdocs</li> <li>Emmet shorthand</li> </ol>"},{"location":"database/","title":"Database","text":""},{"location":"database/#tutorials","title":"Tutorials","text":"<p>SQL Tutorial by DoFactory</p>"},{"location":"database/#references","title":"References","text":"<p>SQL Reference by DoFactory</p>"},{"location":"database/#dbdiagram","title":"DBDiagram","text":"<p>DBDiagram is a free, simple tool to draw Entity-Relationship diagrams by just writing code. </p>"},{"location":"database/#database-naming-conventions","title":"Database Naming Conventions","text":"<p>Database Naming Conventions by Launch by Lunch</p>"},{"location":"database/#resouces","title":"Resouces","text":"<ol> <li>Databases with Free Tier</li> </ol>"},{"location":"design/","title":"Design","text":""},{"location":"design/#mockups","title":"Mockups","text":"<ol> <li>Figma</li> <li>Miro</li> <li>JustInMind</li> <li>MockPlus</li> <li>UXPin</li> <li>MarvelApp</li> <li>ProttApp</li> <li>Wireframe.cc</li> <li>Moqups</li> </ol>"},{"location":"design/#fonts","title":"Fonts","text":"<ol> <li>Google Fonts</li> </ol>"},{"location":"design/#colors","title":"Colors","text":"<ol> <li>Flat UI Colors</li> <li>Color Hunt - For finding color combinations</li> </ol>"},{"location":"design/#emoji","title":"Emoji","text":"<ol> <li>Openmoji</li> </ol>"},{"location":"design/#discover-ui-patterns","title":"Discover UI Patterns","text":"<ol> <li>Dribble - Discover sample web designs</li> <li>UI Patterns and Screenshots - UI Patterns for typical problems which we can compare and decide, without reinventing the wheel</li> </ol>"},{"location":"design/#comics","title":"Comics","text":"<ol> <li>Story Board That</li> </ol>"},{"location":"design/#generating-images-using-ai","title":"Generating Images using AI","text":"<ol> <li>Using DallE via Bing</li> </ol>"},{"location":"design_patterns/","title":"Design Patterns","text":"<p>Design patterns are typically categorized into three main groups based on their purpose:</p> <ol> <li> <p>Creational Patterns Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.  Eg: Singleton, Factory Method, Abstract Factory, Builder, and Prototype patterns.</p> </li> <li> <p>Structural Patterns These patterns focus on class and object composition.  Eg: Adapter, Decorator, Proxy, Facade, Bridge, Composite, and Flyweight patterns.</p> </li> <li> <p>Behavioral Patterns These patterns are concerned in defining how objects interact and communicate with each other.  Eg: Observer, Strategy, Command, Chain of Responsibility, Iterator, State, Template Method, Visitor, Memento, and Mediator patterns.</p> </li> </ol>"},{"location":"design_patterns/#creational-patterns","title":"Creational Patterns","text":""},{"location":"design_patterns/#singleton","title":"Singleton","text":"<p>Ensures that a class has only one instance and provides a global point of access to that instance.</p>"},{"location":"design_patterns/#factory","title":"Factory","text":"<p>Defines an interface for creating an object, but allows subclasses to alter the type of objects that will be created.</p>"},{"location":"design_patterns/#builder","title":"Builder","text":"<p>Used when there are a sequence of steps that needs to be called while creating a class object, like when configuring a sequence of optional parameters.</p>"},{"location":"design_patterns/#prototype","title":"Prototype","text":"<p>Creates new objects by copying an existing object, known as the prototype, during runtime.</p>"},{"location":"design_patterns/#structural-patterns","title":"Structural Patterns","text":""},{"location":"design_patterns/#adapter","title":"Adapter","text":"<p>Allows incompatible interfaces to work together by converting the interface of a class into another interface that a client expects.</p>"},{"location":"design_patterns/#decorator","title":"Decorator","text":"<p>Attaches additional responsibilities to an object dynamically, providing a flexible alternative to subclassing for extending functionality.</p>"},{"location":"design_patterns/#proxy","title":"Proxy","text":"<p>Provides a surrogate or placeholder for another object to control access to it.</p>"},{"location":"design_patterns/#composite","title":"Composite","text":"<p>TBD</p>"},{"location":"design_patterns/#behavioral-patterns","title":"Behavioral Patterns","text":""},{"location":"design_patterns/#observer","title":"Observer","text":"<p>when one object changes state, all its dependents are notified and updated automatically.</p>"},{"location":"design_patterns/#strategy","title":"Strategy","text":"<p>Choose a concreate strategy and use it.</p>"},{"location":"design_patterns/#command","title":"Command","text":""},{"location":"design_patterns/#chain-of-responsibility","title":"Chain of Responsibility","text":""},{"location":"design_patterns/#iterator","title":"Iterator","text":""},{"location":"devops/","title":"DevOps","text":""},{"location":"devops/#learning","title":"Learning","text":"<ol> <li>Microsoft Learn - Training for DevOps Engineers</li> </ol>"},{"location":"docker/","title":"Docker","text":"<p>Docker is a containerization technology which helps to package the application along with all its dependencies and run times, so that there are no dependencies/expectations on the end user system. It is similar to a virtual machine but a lot lighter.</p> <p>A one image explanation of docker:</p> <p></p> <p>Programmer:  ...but, it works on my machine! Manager: Do we then ship your computer!? Docker: Why not? \ud83d\ude01</p>"},{"location":"docker/#install","title":"\ud83d\udee0\ufe0f Install","text":"<p>Install Docker Desktop on Mac, Windows, or Linux.</p>"},{"location":"docker/#terminologies","title":"\ud83d\udcda Terminologies","text":"<p>Basic terminologies in docker are:</p> Terminology Explanation Docker Containerization platform for building, shipping, and running applications. Docker Desktop Desktop application providing a GUI for Docker on Windows and macOS. Image Lightweight, standalone, executable package that includes application code, runtime, libraries, and system tools. Container Runnable instance of a Docker image, encapsulating an application and its dependencies. Dockerfile Text file with instructions to build a Docker image. Registry Service for storing and distributing Docker images. These can be public or private. Docker Hub Cloud-based public registry service by Docker for sharing and managing Docker images. Docker Compose Tool for defining and running multi-container Docker applications using a YAML configuration file."},{"location":"docker/#docker-cheat-sheet","title":"\ud83d\udcd1 Docker Cheat Sheet","text":"<p>Docker Cheat Sheet</p>"},{"location":"docker/#running-your-first-docker-container","title":"\ud83d\udc0b Running Your First Docker Container","text":"<p>You can search for images at docker hub. In the docker image page, you would have instructions on how to pull the image and use it. Example: https://hub.docker.com/_/mongo</p> <p>To pull (download) an image: <pre><code>docker pull &lt;image_name&gt;\n</code></pre></p> <p>Use 'docker run' to create and run a new container. If the image can't be found, it will automatically pull. <pre><code>docker run &lt;image_name&gt;\n</code></pre> Or, alternatively: <pre><code>docker create &lt;image_name&gt; # Outputs container id. Use this for the docker start command\ndocker start &lt;container_name_or_container_id&gt;\n</code></pre></p> <p>To run it as a container in background (detached) mode:</p> <pre><code>docker run -d &lt;image_name&gt;\n</code></pre> <p>To run it with a custom name for the container: <pre><code>docker run -d --name &lt;container_name&gt; &lt;image_name&gt;\n</code></pre></p> <p>Container name needs to be unique. Rerunning the above command again would result in an error.</p> <p>To delete a container: <pre><code>docker rm &lt;container_name&gt;\n</code></pre></p> <p>To run the container and map the host port with the container port: <pre><code>docker run -d --name &lt;container_name&gt; -p &lt;host_port&gt;:&lt;container_port&gt; &lt;image_name&gt;\n</code></pre></p> <p>Some configurations like naming the container, mapping the port can be made only when creating a container and these configurations can't be edited or modified after the container is created. If you need to modify them, you need to delete and recreate the container.</p> <p>To stop the container: <pre><code>docker stop &lt;container_name_or_container_id&gt;\n</code></pre></p> <p>To start the container: <pre><code>docker start &lt;container_name_or_container_id&gt;\n</code></pre></p>"},{"location":"docker/#docker-container-shell","title":"\ud83d\udda5\ufe0f Docker Container Shell","text":"<p>To get into the terminal of a running docker container: <pre><code>docker exec -it container-name sh\n</code></pre> If 'sh' didn't work, you can try 'bash' (one of these two are typically expected within a container).</p> <p>Once inside the terminal of the docker container, you can run commands within the container. Few useful commands to use here are: <pre><code># List Directory\nls\n\n# Present Working Directory\npwd\n\n# Go one folder level back\ncd ..\n\n# List the environment variables within the container\nenv\n</code></pre></p>"},{"location":"docker/#logs","title":"\ud83d\udcdc Logs","text":"<pre><code># Get logs from container\ndocker container-name logs\n\n# Get last few logs\ndocker container-name logs | tail\n\n# Stream the logs\ndocker container-name logs -f\n</code></pre>"},{"location":"docker/#docker-volume","title":"\ud83d\uddc4\ufe0f Docker Volume","text":"<p>The file system in containers are would be lost when the containers are restarted. To avoid this and have data persistence, we do a mapping of host volume to the container volume.</p> <p>Example: <pre><code>docker run -v /path/on/host:/path/in/container my_image\n</code></pre> It is possible to provide a friendly name for the host volume, instead of providing an absolute path. <pre><code>docker run -v my_named_volume:/path/in/container my_image\n</code></pre></p>"},{"location":"docker/#building-docker-image","title":"\ud83e\uddca Building Docker Image","text":""},{"location":"docker/#dockerfile","title":"\ud83d\udcc4 DockerFile","text":"<p>File name must be called 'DockerFile'. Some useful commands to use inside the dockerfile are: <pre><code>FROM - Source Image on top of which we are building our image\nENV - Set an environment variable (instead of this, preferable to use env  externally using docker compose)\nRUN - Run a command inside the container. Can use multiple RUN commands in a docker file.\nCOPY - Copy from host to container\nCMD - Entry Point Command for container. Only 1 per container.\n</code></pre></p>"},{"location":"docker/#docker-build","title":"\ud83c\udfd7\ufe0f Docker Build","text":"<p>Build a docker image with the provided name and tag.  <pre><code>docker build -t  [image-name]:[version] . \n</code></pre></p> <p>The last argument in above command indicates the build context being passed for the docker build, which would be used by the COPY and other such commands. Using \".\" indicates to pass the current directory for the build context.</p> Private Docker Registry <p>One option is to create a docker registry in AWS, by choosing ECR - Elastic Container Registry. AWS ECR supports maintaining only 1 container image in ECR. There are other options like 'Digital Ocean', where they allow having multiple images pushed to a single docker registry.</p> <p>To push an image to a private repository:</p> <ol> <li>You need to login to the docker's private repository (once at the beginning of the session).</li> <li>Then use docker push. Example:  <pre><code>docker push [docker-registry-domain/container-name:tag]\n</code></pre></li> </ol> <p>AWS CLI and credentials has to be configured.</p>"},{"location":"docker/#docker-tutorials","title":"\ud83c\udfac Docker Tutorials","text":"<p>Docker Tutorial for Beginners by TechWorld with Nana</p>"},{"location":"docker/#docker-compose-examples","title":"\ud83d\udc33 Docker Compose Examples","text":"<p>Docker Compose Examples</p> Other Terminologies Terminology Explanation Docker Engine Core of Docker responsible for building, running, and managing Docker containers. Docker Daemon Background process managing Docker containers and handling Docker API requests. Swarm Native clustering and orchestration for Docker, enabling the creation of a swarm of Docker nodes. Service In Docker Swarm, a definition of tasks to execute on nodes, specifying image, ports, and replicas. Stack Docker Compose file used in Docker Swarm mode, defining a multi-container application. Overlay Network Docker Swarm network spanning multiple nodes for communication between containers on different hosts."},{"location":"fastapi/","title":"FastAPI","text":""},{"location":"fastapi/#install","title":"Install","text":"<pre><code>pip install \"fastapi[standard]\"\n</code></pre>"},{"location":"fastapi/#quick-start","title":"Quick Start","text":"<p>Create a file main.py with:</p> <pre><code>from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>To run, <pre><code>fastapi dev main.py\n</code></pre></p> <p>For more details, please refer to FastAPI Example.</p>"},{"location":"fullstack/","title":"FullStack","text":""},{"location":"fullstack/#tech-stacks","title":"Tech Stacks","text":""},{"location":"fullstack/#react-nodejs","title":"React + Nodejs","text":"<ul> <li>Wasp</li> </ul>"},{"location":"fullstack/#react-fastapi","title":"React + FastAPI","text":"<ul> <li>Full Stack FastAPI + React Template</li> </ul>"},{"location":"fullstack/#examples","title":"Examples","text":"<ul> <li>Clone Wars: 100+ Open Source clones of popular websites</li> <li>Real World : A Medium clone with any frontend (React, Angular, &amp; more) and any backend (Node, Django, &amp; more).</li> </ul>"},{"location":"fullstack/#free-tier-services","title":"Free Tier Services","text":"<ul> <li>Free for Dev : A list of SaaS, PaaS and IaaS offerings that have free tiers of interest to devops and infradev </li> </ul>"},{"location":"games/","title":"Games","text":"<p>Collection of online team games to play with your team.  </p> <ol> <li>Pictionary</li> <li>Code Words Game</li> <li>Shellshock</li> <li>Betrayal - Similar to Mafia</li> <li>Uno</li> </ol>"},{"location":"github/","title":"Github","text":"<p>Github is one of the most popular git repositories for source code control (version tracking of code)</p>","boost":0.5},{"location":"github/#is-github-free","title":"\ud83d\udcb2 Is Github Free?","text":"<p>Github has a free plan for both individuals and organizations, as well as paid plans.</p>","boost":0.5},{"location":"github/#git","title":"Git","text":"<p>To know more about git setup and commands, refer to xTLDR Git</p>","boost":0.5},{"location":"github/#github-dev-aka-vs-code-online","title":"Github dev aka VS Code Online","text":"<p>Github has an online version of VSCode that allows you make edits to multiple files in your github repo, similar to VS Code desktop. One caveat is, you will not be able to compile/builds, which requires github codespaces.</p> <p>To activate Github dev on any github repository, press \".\" or replace github.com in the URL with github.dev </p>","boost":0.5},{"location":"graphql/","title":"GraphQL","text":""},{"location":"graphql/#graphql-schema-queries-mutations","title":"GraphQL Schema, Queries &amp; Mutations","text":"<ol> <li>Learn GraphQL</li> <li>GraphQL Queries</li> <li>GraphQL Schema</li> <li>GraphQL Thinking in Graphs</li> </ol>"},{"location":"graphql/#tutorial","title":"Tutorial","text":"<p>How to GraphQL : The free and open-source tutorial to learn all around GraphQL to go from zero to production.</p>"},{"location":"graphql/#graphql-language-support","title":"GraphQL Language Support","text":"<p>There are several graphQL server and client libraries available for wide variety of languages.  GraphQL Code</p> <p>Some popular GraphQL Server libraries are 1. Apollo GraphQL Server (JS)</p> <p>Some popular GraphQL Clients are 1. Apollo GraphQL Client (JS)</p>"},{"location":"graphql/#free-courses","title":"Free Courses","text":"<ol> <li>Exploring GraphQL: A Query Language for APIs by The Linux Foundation at Edx</li> </ol>"},{"location":"graphql/#examples","title":"Examples","text":"<ol> <li>GitHub GraphQL Explorer</li> </ol>"},{"location":"grpc/","title":"gRPC","text":""},{"location":"grpc/#courses","title":"Courses","text":"<ul> <li>Introduction to Protocol Buffers by Linux Foundation</li> </ul>"},{"location":"grpc/#grpc-guis","title":"gRPC GUIs","text":"<p>TBD - Refer to be awesome gRPC curated list for the gRPC GUIs available, similar to Postman.</p>"},{"location":"grpc/#curated-lists","title":"Curated Lists","text":"<ol> <li>Awesome gRPC - Curated list of useful tools and resources for use in gRPC ecosystem</li> </ol>"},{"location":"html/","title":"HTML","text":""},{"location":"html/#list-of-html-attributes","title":"List of HTML Attributes","text":"<p>HTML Attributes at W3 Schools</p>"},{"location":"html/#tutorials","title":"Tutorials","text":"<p>HTML Tutorial by DoFactory</p>"},{"location":"html/#references","title":"References","text":"<p>HTML References by DoFactory</p>"},{"location":"influxdb/","title":"InfluxDB","text":""},{"location":"influxdb/#influxdb-key-concepts","title":"InfluxDB Key Concepts","text":"<p>Concepts of points, series, tags, fields, differences between tags and fields: InfluxDB Key Concepts</p>"},{"location":"influxdb/#influxdb-tutorials","title":"InfluxDB Tutorials","text":"<p>InfluxDB Essential Tutotial</p>"},{"location":"javascript/","title":"Javascript","text":""},{"location":"javascript/#javascript-for-beginners","title":"Javascript for Beginners","text":"<ul> <li>Javascript for Begineers in 2 Hours by Keerti Puruswani</li> <li>Javascript Ebook - A free ebook style guide for learning javascript.</li> </ul>"},{"location":"javascript/#js-basics","title":"JS Basics","text":"<p>Execute any javascript code in browser by going to any webpage, right click -&gt; Inspect -&gt; Console. Every browser has its own implementation of javascript engine. Eg: In Google Chrome, its called V8 Engine. <pre><code>console.log('hello');\n\n//Variables and Data Types\n//Primitive/Value Types\nlet x='hello world!'; //string\nlet y=1.2 //number\nlet z=true; //boolean\nz=7 //type of variable can be dynamically changed with reassignmnet\nlet a; //undefined \nx=null //null (not to use undefined and instead use null)\n\nconsole.log(x)\nconsole.log(typeof(x))\n\n//Reference Types - Objects, Arrays, Functions\n//Arrays and functions are objects as well.\n//Objects\nlet product = {\n    name:'pixel 8',\n    category:'mobile',\n    rating:4.2\n}\n//Accessing items inside object\nconsole.log(product.category)\nconsole.log(product['category'])\n\n//Arrays\nlet items = ['mobile', true, 8.0] //can contain different data types\nconsole.log(items[0]) //logs mobile\n\n//Functions\nfunction createProduct(name) {\n    console.log('Product name is '+name);\n}\ncreateProduct('iPhone 10');\n</code></pre></p> <p>Functions are first class citizen - we can pass functions as arguments to another functions. These are called 'Higher Order Functions'. <pre><code>//Different ways in which a function can be defined\nfunction sum_1(a,b){\n    return a+b;\n}\n\nlet sum_2 = function(a,b){\n    return a+b;\n}\n\nlet sum_3 = (a,b) =&gt; a+b;\n\n//Functions can be defined within another function and returned\n</code></pre></p> <p>Execution Context - The environment where the javascript code is executed. Default is Global Execution Context (GEC) Each function call creates a new execution context and gets added to the callstack There are two phases in the execution context - memory phase and code phase. - Memory phase - Variables are created - Code phase - Code is executed</p> <p>Hoisting - The concept where variables and functions be accessed before they are defined (due to memory phase before the execution of the 1st line)</p>"},{"location":"javascript/#const-vs-let-vs-var","title":"const vs let vs var","text":"<p>const and let are more strict and won't allow usage before initialization const - Use when value should not be changed let - Use when values can be changed var - Avoid</p> <p>Temporal Dead Zone - Getting reference error before variables are initialized when using const or let.</p> <p>const and let are block scoped, while var is global scoped {     let a=10;     const b=5;     var c=6;     console.log(a);     console.log(b);     console.log(c); } console.log(c); //c can be accessed outside the block as its var, but a or b cannot be accessed</p> <p>Lexical scope - The concept where a variable is checked within the local scope and if not found, it will search in the outer scope. Function + Lexical scope - Closure</p>"},{"location":"javascript/#function-callbacks-event-queue-and-event-loop","title":"Function Callbacks, Event Queue and Event Loop","text":"<pre><code>function callbackfn(){\n    console.log(\"Callback function executed\");\n}\n\nsetTimeout(callbackfn, 500);\n\n//Alternatively, as an anonymous function\nsetTimeout(function(){console.log(\"Alternate way\")}, 500);\n//Or\nsetTimeout(()=&gt; console.log(\"Another Alternate way\"),500);\n</code></pre>"},{"location":"javascript/#promises","title":"Promises","text":"<p>Object that represents the state of async. Has 3 states - Pending, fulfilled, rejected.</p> <pre><code>function getData() {\n    return new Promise((resolve, reject)=&gt; {\n        setTimeout(() =&gt; {\n            resolve('data fetched');\n        },5000)\n    })\n}\n\ngetData()\n    .then(result =&gt; { \n        console.log(result);\n        })\n    .catch(error =&gt; {\n        console.error(error);\n    })\n</code></pre>"},{"location":"javascript/#nested-promises","title":"Nested Promises","text":"<pre><code>myPromise = new Promise((resolve, reject) =&gt;{\n    resolve('42');\n})\n\nmyPromise.then((result)=&gt; {console.log(\"1st result is \",result)}).then((result)=&gt; {console.log(\"2nd result is \",result)}).then((result)=&gt;{console.log(\"3rd result is \"+result)}).catch(error =&gt; {console.error(error)})\n</code></pre>"},{"location":"javascript/#async-and-await","title":"Async and Await","text":"<p>TBD</p>"},{"location":"javascript/#callback-hellpyramid-of-doom","title":"Callback Hell/Pyramid of Doom","text":"<p>asyncOperation1(arg1, (result1) =&gt; {      asyncOperation2(result1, (result2)=&gt;{         asyncOperation3(result2, (result3)=&gt;{ //and so on})     })})</p>"},{"location":"javascript/#dom-model","title":"DOM Model","text":"<p>The HTML structure gets converted to a DOM tree, which can then be accessed/set using javascript. </p> <p>Some of the most commonly used DOM functions are: <pre><code>document.querySelector(\"h1\") //Query using Tag Selector. Returns only the 1st match and ignores the rest.\ndocument.querySelector(\".title\") //Query using ID Selector\ndocument.querySelector(\"#my-class\") //Query using Class Selector\n\ndocument.querySelectorAll(\"h1\") //Returns an array of all matched h1 elements\n\ndocument.querySelector(\"#my-class h1\") //Nested search. Searches for a h1 tag which is present inside the class \"my-class\"\n</code></pre> PS: Above is the javascript way of querying. One of the most popular javascript libraries is jQuery, which is much more concise and easy to use.  To include jQuery, refer to jQuery releases section. Include the jQuery javascript above your javascript include statement in HTML: <pre><code>&lt;script src=\"https://code.jquery.com/jquery-3.6.3.min.js\" integrity=\"sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre></p>"},{"location":"javascript/#event-listener","title":"Event Listener","text":"<p>Add an event listener function to a HTML element and this would make the function to be executed when the event occurs. <pre><code>function myFunction(){\n    alert(\"Function triggered\");\n}\n\ndocument.querySelector(\"h1\").addEventListener(\"click\",myFunction); //Adds the function \"myFunction\" as a listener to the 1st h1 element's click event\n</code></pre></p> <p>The above example can also be done using anonymous function as below: <pre><code>document.querySelector(\"h1\").addEventListener(\"click\",function (){\n    alert(\"Function triggered\");\n}\n); \n</code></pre> You can associate multiple HTML elements to a common function. To know which HTML element triggered the function, we can get to know using \"this\", as below. <pre><code>document.querySelector(\"h1\").addEventListener(\"click\",function (){\n    alert(this);\n    console.log(this.innerHTML);\n    this.style.color = \"red\";\n}\n); \n</code></pre> Although you can set an element's style property like color using \"this.style.color\", you may not always able to read the color property using this, unless the element style property is explicitly set. When the property is set using CSS styles, then you would not be able to read this value. For more details, please refer to this stackover flow post.</p> <p>To add events for keyboard actions, these events can be attached to the document directly. Adding an argument to the event listener would provide details on what caused the event. <pre><code>document.addEventListener(\"keydown\", function(event){console.log(event.key)};\n</code></pre></p>"},{"location":"javascript/#adding-and-removing-css-classes-from-javascript","title":"Adding and Removing CSS Classes from Javascript","text":"<p>To dynamically add/remove a CSS class from a HTML object, use querySelector to select the object and then use add/remove functions as shown below: <pre><code>document.querySelector(\"#myId\").classList.add(\"css-class-name\");\ndocument.querySelector(\"#myId\").classList.remove(\"css-class-name\");\n</code></pre> Instead, using jQuery,  the same can be done using: <pre><code>$(\"#myId\").addClass(\"css-class-name\");\n$(\"#myId\").removeClass(\"css-class-name\");\n</code></pre> To check if a HTML element has a class: <pre><code>$(\"#myId\").hasClass(\"css-class-name\");\n</code></pre></p>"},{"location":"javascript/#updating-text-of-html-element","title":"Updating Text of HTML Element","text":"<p>Using jQuery, we can update text of a HTML element as shown below. <pre><code>$(\"#myheading\").text(); //Returns the text\n$(\"#myheading\").text(\"My New Heading\"); //Updates the text\n\n$(\"#myheading\").html(); //Returns the inner HTML present which would include styles like &lt;b&gt;, &lt;i&gt;\n$(\"#myheading\").html(\"&lt;b&gt;My New&lt;/b&gt; &lt;i&gt;Heading&lt;/i&gt;\"); //Updates the inner HTML with the styling provided\n</code></pre></p>"},{"location":"javascript/#timeout-function","title":"Timeout Function","text":"<p>Here is the syntax for timeout function in javascript: <pre><code>setTimeout(&lt;function&gt;, timeout_value_ms);\n</code></pre> Using anonymous function: <pre><code>setTimeout(function(){\ndocument.querySelector(\"#myId\").classList.add(\"css-class-name\");\n}, 100);\n</code></pre></p>"},{"location":"javascript/#constructor-function","title":"Constructor Function","text":"<p>A constructor function in javascript is equivalent to a class in other programming languages. A constructor function would be similar to a normal function with the difference of constructor function names would be in Pascal case (\"MyStudent\" instead of \"myStudent\") <pre><code>function MyStudent(name, age, marks){\n    //Properties\n    this.name = name,\n    this.age = age,\n    this.marks = marks,\n\n    //Methods\n    this.calculateTotal = function (){\n        var total = 0;\n        for (var i=0;i&lt;this.marks.length;i++){\n            total += this.marks[i];\n        }\n        return total;\n    }\n}\n\ns1 = new MyStudent(\"John\", 14, [85,90,92]);\nconsole.log(s1.calculateTotal());\n</code></pre></p>"},{"location":"javascript/#map","title":"Map","text":"<p>Map function is used to traverse an array and apply a custom function over each element of the array. The output of Map function would also be an array of the same size as the input array. <pre><code>var myArray = [2,3,6,7,9,10]\n\nfunction double(x){\nreturn 2 * x;\n}\n\nmyNewArray = myArray.map(double);\nconsole.log(myNewArray);\n</code></pre> Alternatively, using anonymous function: <pre><code>var myArray = [2,3,6,7,9,10]\n\nmyNewArray = myArray.map(function (x){\nreturn 2 * x;\n});\nconsole.log(myNewArray);\n</code></pre></p>"},{"location":"javascript/#filter","title":"Filter","text":"<p>Filter function is used to traverse an array using a custom function which checks for a boolean condition and returns a subset of the array, when the condition is true. <pre><code>var myArray = [2,3,6,7,9,10]\n\nmyNewArray = myArray.filter(function (x){\nreturn x &gt; 6;\n});\nconsole.log(myNewArray);\n</code></pre></p>"},{"location":"javascript/#reduce","title":"Reduce","text":"<p>Reduce function is used to traverse an array using a custom function and reduce the entire array to a single element. <pre><code>var myArray = [2,3,6,7,9,10]\n\nmyNewArray = myArray.reduce(function (aggregator, x){\nreturn aggregator + x;\n});\nconsole.log(myNewArray);\n</code></pre></p>"},{"location":"javascript/#find-and-findindex","title":"Find and FindIndex","text":"<p>Find the first element that matches the given condition. Use FindIndex to get the index of the first matched element.</p> <p>Added in ES6. <pre><code>var myArray = [2,3,6,7,9,10]\n\nNum = myArray.find(function (x){\nreturn x&gt;6;\n});\nconsole.log(Num);\n\nNumIndex = myArray.findIndex(function (x){\nreturn x&gt;6;\n});\nconsole.log(NumIndex);\n</code></pre></p>"},{"location":"javascript/#fat-arrow","title":"Fat Arrow (=&gt;)","text":"<pre><code>var myArray = [2,3,6,7,9,10]\n\nmyNewArray = myArray.map(function (x){\nreturn 2 * x;\n});\n\n//Above anonymous function can still be reduced using fat arrow function as below.\nmyNewArray = myArray.map(x =&gt; 2 * x);\nconsole.log(myNewArray);\n</code></pre>"},{"location":"jquery/","title":"jQuery","text":""},{"location":"jquery/#setting-up","title":"Setting Up","text":"<p>One of the most popular javascript libraries is jQuery, which is much more concise and easy to use.  To include jQuery, refer to jQuery releases section. Include the jQuery javascript above your javascript include statement in HTML: <pre><code>&lt;script src=\"https://code.jquery.com/jquery-3.6.3.min.js\" integrity=\"sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre></p>"},{"location":"jquery/#adding-and-removing-css-classes","title":"Adding and Removing CSS Classes","text":"<p>To dynamically add/remove a CSS class from a HTML object, using jQuery: <pre><code>$(\"#myId\").addClass(\"css-class-name\");\n$(\"#myId\").removeClass(\"css-class-name\");\n</code></pre> To check if a HTML element has a class: <pre><code>$(\"#myId\").hasClass(\"css-class-name\");\n</code></pre></p>"},{"location":"jquery/#updating-text-of-html-element","title":"Updating Text of HTML Element","text":"<p>Using jQuery, we can update text of a HTML element as shown below. <pre><code>$(\"#myheading\").text(); //Returns the text\n$(\"#myheading\").text(\"My New Heading\"); //Updates the text\n\n$(\"#myheading\").html(); //Returns the inner HTML present which would include styles like &lt;b&gt;, &lt;i&gt;\n$(\"#myheading\").html(\"&lt;b&gt;My New&lt;/b&gt; &lt;i&gt;Heading&lt;/i&gt;\"); //Updates the inner HTML with the styling provided\n</code></pre></p>"},{"location":"jquery/#updating-attributes","title":"Updating Attributes","text":"<p>Using jQuery, we can get attribute values as well as set attributes as shown below: <pre><code>$(\"img\").attr(\"src\"); //Returns the src attribute value for the img tag\n$(\"img\").attr(\"src\",\"logo.png\"); //Updates the attribute value to \"logo.png\" for the img tag\n</code></pre></p>"},{"location":"jquery/#updating-css","title":"Updating CSS","text":"<p>Use the CSS property name to query the current value of a CSS property. When the value is passed as the 2nd argument, the value gets set. <pre><code>$(\"h1\").css(\"color\"); //Returns the font color of h1\n$(\"h1\").css(\"color\",\"red\"); //Sets the font color\n</code></pre></p>"},{"location":"jquery/#adding-event-listeners","title":"Adding Event Listeners","text":"<p>To register for a click event for \"h1\" tag using jQuery: <pre><code>$(\"h1\").click(function(){\nconsole.log(\"clicked\");\n});\n</code></pre> Or more generically where you can pass the event type as a string: <pre><code>$(\"h1\").on(\"click\",(function(){\nconsole.log(\"clicked\");\n}));\n</code></pre></p> <p>To register for key press across the entire web page, you can use \"body\" as the identifier: <pre><code>$(\"body\").keypress(function(event){\nconsole.log(event.key); //Logs the key pressed by the user\n});\n</code></pre> or directly passing document as the argument (and not as a string): <pre><code>$(document).keypress(function (event) {\nconsole.log(event.key); //Logs the key pressed by the user\n$(\"h1\").text(event.key);\n});\n</code></pre></p>"},{"location":"jquery/#adding-html-elements","title":"Adding HTML Elements","text":"<p>To add a HTML element before/after an element: <pre><code>$(\"h1\").before(\"&lt;button&gt;My New Button&lt;/button&gt;\");\n$(\"h1\").after(\"&lt;button&gt;My New Button&lt;/button&gt;\");\n</code></pre> To add a HTML element within an element: <pre><code>$(\"h1\").prepend(\"&lt;button&gt;My New Button&lt;/button&gt;\"); //Within h1,but before h1 text\n$(\"h1\").append(\"&lt;button&gt;My New Button&lt;/button&gt;\"); //Within h1,but after h1 text\n</code></pre></p>"},{"location":"jquery/#animations","title":"Animations","text":"<p>Various options available to hide and unhide: <pre><code>$(\"h1\").hide();\n$(\"h1\").show();\n$(\"h1\").toggle(); //Alternates between hide and show\n\n//With fading\n$(\"h1\").fadeOut(); //Similar to hide\n$(\"h1\").fadeIn();\n$(\"h1\").fadeToggle();\n\n//With Sliding\n$(\"h1\").slideUp(); //Collapse\n$(\"h1\").slideDown(); //Uncollapse\n$(\"h1\").slideToggle();\n</code></pre> Custom animations are possible using animate: <pre><code>$(\"h1\").animate({opacity:0.5});\n</code></pre> It is also possible to chain functions and they get executed one by one from left to right. <pre><code>$(\"h1\").slideUp().slideDown().animate({opacity:0.5});\n</code></pre></p>"},{"location":"k8s/","title":"K8s","text":""},{"location":"k8s/#quick-start","title":"Quick Start","text":"<ul> <li>Illustrated Children's Guide to Kubernetes</li> </ul>"},{"location":"k8s/#courses","title":"Courses","text":"<ul> <li>Introduction to Kubernetes by Linux Foundation</li> </ul>"},{"location":"kids/","title":"Kids","text":""},{"location":"kids/#how-to-discipline-a-kid","title":"How to Discipline a Kid?","text":""},{"location":"kids/#timeouts","title":"Timeouts","text":"<p>https://www.healthychildren.org/English/family-life/family-dynamics/communication-discipline/Pages/Time-Outs-101.aspx</p>"},{"location":"kids/#consequence-instead-of-punishmnet","title":"Consequence instead of Punishmnet","text":"<p>https://www.reddit.com/r/Parenting/comments/bunpte/discipline_for_a_4_year_old_what_is_working_for/</p>"},{"location":"kids/#articles","title":"Articles","text":"<ol> <li>https://www.emedicinehealth.com/how_to_discipline_4_year_old_who_doesnt_listen/article_em.htm</li> </ol>"},{"location":"kids/#books","title":"Books","text":"<ol> <li>How to talk so kids will listen and listen so kids will talk</li> <li>No Bad Kids by Janet Lansbury</li> <li>1-2-3 Magic</li> <li>Unconditional Parenting by Alfie Kohn</li> </ol>"},{"location":"kids/#courses","title":"Courses","text":"<ol> <li>https://alankazdin.com/everyday-parenting-the-abcs-of-child-rearing/</li> </ol>"},{"location":"linux/","title":"Linux","text":""},{"location":"linux/#resources","title":"Resources","text":"<ul> <li>Linux Foundation</li> </ul>"},{"location":"lua/","title":"Lua","text":""},{"location":"lua/#why-lua","title":"Why Lua?","text":"<p>Getting Started with LuaRocks</p>"},{"location":"lua/#what-is-luarocks","title":"What is LuaRocks?","text":"<p>A built version of a Lua module is a rock. Luarocks are equivalent to EXE/Installers in Windows.</p>"},{"location":"lua/#how-to-install","title":"How to Install?","text":"<p>TBD</p>"},{"location":"lua/#rockspec-format","title":"Rockspec Format","text":"<p>Rockspec Format</p>"},{"location":"lua/#how-to-build-a-lua-package","title":"How to Build a Lua Package?","text":"<p>Instructions on how to create a lua rock</p> <p><code>luarocks pack &lt;rockspecname&gt;</code></p>"},{"location":"make/","title":"Make","text":"<p>Setting up \"make\" in Windows involves two steps:</p> <ol> <li>Installing make</li> <li>Adding make directory to Environment Variable</li> </ol>"},{"location":"make/#install-make","title":"Install Make","text":"<p>Make can be installed using winget, an in-built Windows package manager. <pre><code>winget install -e --id GnuWin32.Make\n</code></pre> This will download and launch the GnuWin32 Make installer. Once installed GnuWin32 would be installed and available at below location: <pre><code>C:\\Program Files (x86)\\GnuWin32\\bin\n</code></pre></p>"},{"location":"make/#add-to-path","title":"Add to Path","text":"<p>Even after installation is completed, make would not be detected in command prompt/power shell. This is because the directory containing the make.exe is not added to the \"Path\" environment variable.</p> <ol> <li>Search for <code>Edit the system environment variable</code> in Windows search bar and open it.</li> <li>This would open the <code>System Properties</code> dialog. Click on <code>Environment Variables...</code> option.</li> <li>Here you can either add the path to either <code>User</code> or <code>System</code> environment variables - use System if you would like to add this path for all users.</li> <li>Choose the <code>Path</code> variable and click <code>Edit</code>. Add the path using the <code>New</code> option as shown below.  </li> <li>Click OK to close all the dialogs.</li> </ol> <p>Important thing to note: You need to close and reopen any already open command terminals for make to be detected. You also need to close and reopen VS Code for the new path to be detected in the VS Code terminal.</p>"},{"location":"make/#verify-make-installation","title":"Verify Make Installation","text":"<p>Open a new command prompt or bash shell and provide below command to check if make is detected: <pre><code>make --version\n</code></pre> This is expected to give a response as below: <pre><code>GNU Make 3.81\nCopyright (C) 2006  Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\n\nThis program built for i386-pc-mingw32\n</code></pre></p>"},{"location":"markdown/","title":"Markdown","text":""},{"location":"markdown/#headings","title":"Headings","text":"<p>Use <code>#</code> for headings. Use a space between the # and the heading text. <pre><code># Heading 1\n## Heading 1.1\n### Heading 1.1.1\n</code></pre></p>"},{"location":"markdown/#paragraph","title":"Paragraph","text":"<p>Use an empty line to separate paragraphs.</p>"},{"location":"markdown/#links","title":"Links","text":"<p>Have the text within square braces [ ], followed by the URL in round braces ( ). <pre><code>I love [xTLDR](https://xtldr.com) for its brevity.\n</code></pre> I love xTLDR for its brevity.</p>"},{"location":"markdown/#images","title":"Images","text":"<p>Images are similar to links. Have an exclamatory mark, followed by alternate text for the image within square braces [ ], followed by absolute or relative URL of the image in round braces. <pre><code>Logo of Wikipedia is ![Wikipedia Logo](https://en.wikipedia.org/static/images/icons/wikipedia.png)\n</code></pre></p>"},{"location":"markdown/#lists","title":"Lists","text":""},{"location":"markdown/#ordered-lists","title":"Ordered lists","text":"<p>Use numbering for ordered lists. <pre><code>1. Item 1\n  1.1 Sub Item\n2. Item 2\n3. Item 3\n</code></pre></p>"},{"location":"markdown/#unordered-lists","title":"Unordered Lists","text":"<p>Use <code>-</code> or <code>+</code> or <code>*</code> for unordered lists. <pre><code>- Item 1\n  - Sub Item\n- Item 2\n- Item 3\n</code></pre></p>"},{"location":"markdown/#code","title":"Code","text":"<p>To represent code or text that you don't want markdown syntax to decipher:</p> <p>Enclose them with a single backtick (`) for single line content, which would show up as:</p> <p><code>Single line code enclosed within single backtick</code></p> <p>Enclose them with triple backticks (```) for multi line content</p> <pre><code>def function():\n    print(\"Hello World!\")\n</code></pre>"},{"location":"markdown/#tables","title":"Tables","text":"<p>Syntax for table is <pre><code>| Column 1   | Column 2 | Column 3 |\n| ---------- | -------- | -------- |\n| Row 1 Text | Text     | Random   |\n| Row 2 Text | Text     | Random   |\n</code></pre></p>"},{"location":"markdown/#editors","title":"Editors","text":"<p>As markdown is text file, it can be created and edited with any text editor. There are tools that provide preview and higher support (like automatic formatting of a table)</p>"},{"location":"markdown/#vs-code","title":"VS Code","text":"<p>VS Code has basic markdown support built-in, apart from wide variety of mark down extensions like Markdown All in One.</p>"},{"location":"markdown/#obsidian","title":"Obsidian","text":"<p>Obsidian is an offline application that supports markdown. It is free for personal use and has a paid plan for commercial use.</p>"},{"location":"mkdocs/","title":"MKDocs","text":"<p>Material for MKDocs is an open source project where you can write your documentation using markdown, host it in git and generate a static site for you, like this site.</p>"},{"location":"mkdocs/#docker-dev-container","title":"Docker Dev Container","text":"<p>In your repository root directory, create a folder called \".devcontainer\" and create a \"devcontainer.json\" with below file contents.  </p> <pre><code>{\n    \"name\": \"mkdocs\",\n    \"image\": \"squidfunk/mkdocs-material\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"ms-python.python\",\n                \"mhutchie.git-graph\",\n                \"yzhang.markdown-all-in-one\",\n                \"zaaack.markdown-editor\",\n                \"esbenp.prettier-vscode\",\n                \"ms-python.vscode-pylance\"\n            ]\n        }\n    },\n        // Use 'postCreateCommand' to run commands after the container is created.\n        \"postCreateCommand\": \"pip install mkdocs-material[imaging] &amp;&amp; pip install mkdocs-glightbox\"\n    }\n</code></pre> <p>In VSCode, click on the green <code>&gt;&lt;</code> icon on the bottom left and choose 'Reopen in Container'.</p>"},{"location":"mkdocs/#mkdocs-extensions","title":"MkDocs Extensions","text":"<ol> <li>https://tylerdotrar.github.io/mkdocs-coverpage/</li> </ol>"},{"location":"mongodb/","title":"MongoDB","text":""},{"location":"mongodb/#setup-mongo-database-standalone","title":"Setup mongo Database standalone","text":"<p><code>docker pull mongo</code></p> <p><code>docker run -p 27017:27017 --name my-mongodb -v my-mongodb-data:/data/db -d mongo</code></p> <p>For Mongo DB, download MongoDB Compass for graphical UI for interacting with mongoDB:</p>"},{"location":"mongodb/#python-mongo-db-drivers","title":"Python Mongo DB Drivers:","text":"<p>There are two popular drivers available:</p> <ol> <li>PyMongo (Official)</li> <li>MongoEngine (Wrapper over PyMongo, provides Object Mapping similar to SQLAlchemy)</li> </ol>"},{"location":"mongodb/#pymongo","title":"PyMongo","text":"<p>Repository: https://github.com/mongodb/mongo-python-driver</p> <p>Examples:</p> <ol> <li>PyMongo Example</li> <li>PyMongo Example with FastAPI</li> </ol>"},{"location":"mongodb/#mongo-engine","title":"Mongo Engine","text":"<p>A Python Object-Document-Mapper for working with MongoDB</p> <p>Repository: https://github.com/MongoEngine/mongoengine</p> <p>Examples:</p> <ol> <li>Mongo Engine Example</li> </ol>"},{"location":"mongodb/#comparison","title":"Comparison","text":"<p>PyMongo vs Mongo Engine Comparison</p>"},{"location":"mongodb/#python-fastapi-with-pymongo","title":"Python FastAPI with pymongo","text":"<p>If you are using Python FastAPI, you can go with pymongo as there are already models defined for FastAPI. </p> <p>Pymongo Tutorial with FastAPI | Github Repo</p>"},{"location":"mongodb/#python-unit-tests-and-mocking-options","title":"Python Unit Tests and Mocking Options","text":"<ol> <li>https://github.com/schireson/pytest-mock-resources</li> <li>https://github.com/mdomke/pytest-mongodb</li> <li>https://github.com/mongomock/mongomock</li> </ol>"},{"location":"mongodb/#concepts","title":"Concepts","text":""},{"location":"mongodb/#replication","title":"Replication","text":"<p>Replication means you have several nodes. You have one PRIMARY and one or several SECONDARY. As term \"repliaction\" implies the SECONDARY have an exact copy of the PRIMARY. An application can write only to the PRIMARY, however it can read either from PRIMARY or SECONDARY.</p>"},{"location":"mongodb/#sharding","title":"Sharding","text":"<p>Sharding means you distribute the data over several nodes. In your case you put even ID's to one node and odd ID's to the other node. This is very similar to MongoDB sharding, however typically you just define the sharding key and MongoDB takes care how to distribute the data evenly.</p>"},{"location":"mongodb/#references","title":"References","text":"<ol> <li>https://stackoverflow.com/questions/42239241/how-to-mock-mongodb-for-python-unittests</li> <li>https://stackoverflow.com/questions/66223290/mocking-database-calls-in-python-using-pytest-mock</li> </ol>"},{"location":"neo4j/","title":"Neo4j","text":""},{"location":"neo4j/#install","title":"Install","text":"<p>Neo4j at Docker</p>"},{"location":"neo4j/#docker-command","title":"Docker Command","text":"<pre><code>docker pull neo4j\ndocker run -p 7474:7474 -p 7687:7687 -v pi-neo4j-data:/data -d neo4j\n</code></pre>"},{"location":"neo4j/#training","title":"Training","text":"<p>Free Training from Neo4j</p>"},{"location":"nextjs/","title":"NextJS","text":"<p>Next.js is a React framework for building full-stack web applications.</p>"},{"location":"nextjs/#install","title":"Install","text":"<p>Install nodeJS and then use the command:</p> <p><code>npx create-next-app@latest</code></p>"},{"location":"nextjs/#learn","title":"Learn","text":"<ul> <li>Prerequisite: React Foundations by NextJS</li> <li>Dashboard App using NextJS</li> </ul>"},{"location":"nextjs/#templates","title":"Templates","text":"<ul> <li>List of NextJS Templates</li> <li>NextJS Template with Stripe : Video</li> <li>SaaS Template with Supabase</li> <li>NextJS Boilerplate</li> </ul>"},{"location":"nextjs/#resources","title":"Resources","text":"<ul> <li>Learn NextJS</li> <li>NextJS Showcase</li> </ul>"},{"location":"nodejs/","title":"NodeJS","text":""},{"location":"nodejs/#install","title":"Install","text":""},{"location":"nodejs/#windows","title":"Windows","text":"<p>Download and Install LTS version of Nodejs</p>"},{"location":"nodejs/#linux","title":"Linux","text":"<p>Install nvm for managing node installations: <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n</code></pre> Install node v20: <pre><code>nvm install 20\n</code></pre></p>"},{"location":"nodejs/#useful-packages","title":"Useful Packages","text":""},{"location":"nodejs/#expressjs","title":"ExpressJS","text":"<ul> <li>Installation instructions</li> <li>Example</li> </ul>"},{"location":"nodejs/#nodemon","title":"Nodemon","text":"<p>Nodemon - Monitors source code changes and automatically reloads the server.</p>"},{"location":"nodejs/#body-parser","title":"Body Parser","text":"<p>Body Parser - Node.js body parsing middleware.</p>"},{"location":"opa/","title":"OPA","text":"<p>OPA stands for Open Policy Agent. It is an open source framework which services can use to check whether a user is allowed to access a resource based on custom rules that you can define.</p>"},{"location":"opa/#getting-started-with-opa","title":"Getting Started with OPA","text":"<p>Getting Started with OPA by Styra</p>"},{"location":"opa/#rego-language","title":"Rego Language","text":"<p>OPA Policy Language</p>"},{"location":"opa/#sample-opa","title":"Sample OPA","text":"<p>Create below files in a base directory.</p>"},{"location":"opa/#policyrego","title":"policy.rego","text":"<pre><code>package test\n\nimport future.keywords.if\n\ndefault allow := true\ndefault deny := false\n\ndefault hello := {\"hello\",\"world\"}\n\nfull_input := input\nfull_path := input.path\nsplit_paths := split(input.path,\"//\")\n</code></pre>"},{"location":"opa/#test_inputjson","title":"test_input.json","text":"<p>This is a test input file to use for testing using \"opa eval\". <pre><code>{\n  \"path\": \"my/path/goes/here/file\"\n}\n</code></pre></p>"},{"location":"opa/#download-opa","title":"Download OPA","text":"<ol> <li>Download OPA EXE for Windows</li> <li>Rename \"opa_windows_amd64.exe\" to \"opa.exe\".</li> <li>Place the \"opa.exe\" in the base folder.</li> </ol>"},{"location":"opa/#opa-eval-command-for-testing","title":"OPA Eval Command for Testing","text":"<p>Run below command from command prompt from the base folder which contains the opa.exe, policy.rego and test_input.json. <pre><code>opa.exe eval --data policy.rego --input test_input.json --format raw \"data.test\"\n</code></pre> This would evaluate and return the output of all the variables/rules in the policy.rego file.</p>"},{"location":"pipx/","title":"pipx","text":""},{"location":"pipx/#install","title":"Install","text":"<p>Install pipx on Linux, Windows and macOS.</p>"},{"location":"pipx/#windows","title":"Windows","text":"<p>Install scoop, if not already installed using Windows Powershell: <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\nInvoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression\n</code></pre> Install pipx usng scoop: <pre><code>scoop install pipx\npipx ensurepath\n</code></pre></p>"},{"location":"pipx/#getting-started","title":"Getting Started","text":"<p>Getting Started with pipx</p>"},{"location":"plantuml/","title":"PlantUML","text":""},{"location":"plantuml/#online-plantuml-generator","title":"Online PlantUML Generator:","text":"<p>Online PlantUML</p>"},{"location":"plantuml/#sequence-diagram-syntax","title":"Sequence Diagram Syntax","text":"<p>Sequence Diagram Syntax</p>"},{"location":"plantuml/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Install the PlantUML VS Code Extension by Jebbs</li> </ol> Option 1: Docker InstallationOption 2: Local Java Installation <p>Run plantuml server using docker: <pre><code>docker run -d -p 8800:8080 plantuml/plantuml-server:jetty\n</code></pre></p> <p>Configure plantuml server in VSCode Extension:  </p> <ol> <li>Click on the plantuml settings icon and then click on 'Extension Settings'. </li> <li>Scroll down to 'Plantuml: Render' and 'Plantuml: Server' and configure them as below. <pre><code>Plantuml: Render: PlantUML Server\nPlantuml: Server: http://localhost:8800\n</code></pre> </li> </ol> <p>If you wish, you can install PlantUML local server using Choco using below steps: For windows users,  majkinetor  introduced a way to install plantuml and its dependencies easily. Run  <code>cmd.exe</code>  as Administrator, and run two commands as follows (the first command is not needed and will fail if you already have chocolatey installed).</p> <pre><code>@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"  \n\nchoco install plantuml\n</code></pre> <p>If you've installed java, but still prompts \"java not installed\", please add java bin path to  <code>PATH</code>  environment variable.</p>"},{"location":"plantuml/#usage","title":"Usage","text":"<p>Create a file in VS Code with *.plantuml extension and create a uml diagram as per its syntax.</p> <p>Example: <pre><code>@startuml\nBob -&gt; Alice : hello\n@enduml\n</code></pre> Press Alt + D to preview the UML diagram. Kindly make sure that the docker container in running (if went with \"Option 1: Docker Installation\")</p>"},{"location":"poetry/","title":"Poetry","text":""},{"location":"poetry/#install","title":"Install","text":"<p>Install poetry using pipx</p>"},{"location":"poetry/#windows","title":"Windows","text":"<p>Install scoop, if not already installed using Windows Powershell: <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\nInvoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression\n</code></pre> Install pipx usng scoop: <pre><code>scoop install pipx\npipx ensurepath\n</code></pre> Install poetry using pipx: <pre><code>pipx install poetry\n</code></pre></p>"},{"location":"poetry/#poetry-commands","title":"\ud83d\udda5\ufe0f Poetry Commands","text":"Command Description poetry new [project-name] Creates a new starter project directory structure, including the pyproject.toml file poetry init Initialize poetry for an existing project, which is switching to poetry poetry install Install the dependencies of the project based on the versions in poetry.lock file poetry update Update dependent packages to the latest versions poetry shell Activate the python virtual environment created by poetry poetry add package-name Install a package for the project poetry run python main.py Run your main python script using poetry poetry run pytest Run pytest poetry version [major/minor/patch] Increment the major/minor/patch version of the project in the pyproject.toml poetry build Build package poetry publish Publish package to PyPI"},{"location":"poetry/#advanced","title":"Advanced","text":"<p>To use a specific version of python instead of the active python:</p> <pre><code>poetry env use \"C:\\Python38\\python.exe\"\n</code></pre>"},{"location":"powerpoint/","title":"PowerPoint","text":""},{"location":"powerpoint/#specifying-default-theme","title":"Specifying Default Theme","text":"<p>If you have a *.potx PowerPoint theme, you can make it as your default theme by placing it at below location: <pre><code>%appdata%\\Microsoft\\Templates\\blank.potx\n</code></pre></p> <p>Restart PowerPoint and your new theme would be used as the default PowerPoint theme. That's it!</p>"},{"location":"python/","title":"Python","text":""},{"location":"python/#python-tools","title":"Python Tools","text":"<ul> <li>Poetry</li> <li>pipx</li> </ul>"},{"location":"react/","title":"React","text":""},{"location":"react/#install","title":"Install","text":"<ol> <li>Download and Install LTS NodeJS.</li> </ol>"},{"location":"react/#vscode-extensions","title":"VSCode Extensions","text":"<ul> <li>ES7+ React/Redux/React-Native snippets</li> </ul>"},{"location":"react/#create-react-app","title":"Create React App","text":"<p>Command to create react app from command prompt: <code>npx create-react-app my-app</code></p>"},{"location":"react/#to-upgrade-dependencies","title":"To Upgrade Dependencies","text":"<p>Install npm-check-updates globally using the command: <code>npm install -g npm-check-updates</code></p> <p>Then use below commands to upgrade and install the dependencies: <pre><code>ncu -u\nnpm install\nnpm start\n</code></pre></p>"},{"location":"react/#react-style-guide","title":"React Style Guide","text":"<ol> <li>Airbnb React Style Guide</li> </ol>"},{"location":"react/#simple-react-app-example","title":"Simple React App Example","text":"<p>Here is a very simple example for React application, to be written in index.js: <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst lucky_number = 3;\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;My lucky number is {lucky_number} and here is a random number:{Math.floor(Math.random() * 10)}&lt;/p&gt;\n    &lt;p className='para' contentEditable='true' spellCheck='false'&gt;Enter your name by clicking here&lt;/p&gt;\n      &lt;/div&gt;,\n  document.querySelector(\"#root\")\n);\n</code></pre> Note: You can include javascript expressions (not javascript statement/code) within the HTML code within { }. </p> <p>Now, include the index.js in index.html like you normally would, with a minor change of specifying type as 'JSX' instead of 'Javascript' as shown below. <pre><code>&lt;script  src=\"index.js\" type=\"text/JSX\"&gt;&lt;/script&gt;\n</code></pre> When applying attributes to HTML elements in JSX, you need to use camel case equivalent. Eg: <code>contentEditable</code> instead of <code>contenteditable</code>.</p>"},{"location":"react/#concepts","title":"Concepts","text":""},{"location":"react/#jsx","title":"JSX","text":"<p>TBD</p>"},{"location":"react/#babel","title":"Babel","text":"<p>Babel is a toolchain that is mainly used to convert latest version of javascript code into a backwards compatible version of JavaScript that would be supported by older browsers.</p>"},{"location":"react/#css-inline-style","title":"CSS Inline Style","text":"<p>For CSS inline style, they need to use javascript objects with key-value pairs. The values need to be strings. <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nvar cssInlineStyle = {\n  color: \"green\",\n  textDecoration: \"underline\"\n};\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;h1 style={cssInlineStyle}&gt;My Favourite Foods&lt;/h1&gt;\n    &lt;img\n      src=\"https://i.ytimg.com/vi/CCab5oh0ZOc/maxresdefault.jpg\"\n      alt=\"dosa\"\n    &gt;&lt;/img&gt;\n  &lt;/div&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre></p>"},{"location":"react/#react-components","title":"React Components","text":"<p>Use Pascal case for naming React components. Eg: <code>Heading</code> Create a separate jsx file for each React component, which can then be imported and used, similar to a HTML tag. </p> <p>Example:  Heading.jsx, parallel to index.js contains: <pre><code>import React from \"react\";\n\nfunction Heading() {\n  return &lt;h1&gt;My Favourite Foods&lt;/h1&gt;;\n}\n\nexport default Heading;\n</code></pre> index.js imports and uses <code>Heading.jsx</code> present parallel to index.js: <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Heading from \"./Heading\"\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;Heading /&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Bacon&lt;/li&gt;\n      &lt;li&gt;Jamon&lt;/li&gt;\n      &lt;li&gt;Noodles&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre></p>"},{"location":"react/#react-es6-import-export","title":"React ES6 Import Export","text":"<p>There can be only one default export from a jsx file. To export multiple items:</p> <p><code>Pi.jsx</code> file contents: <pre><code>const pi = 3.14;\n\nfunction DoublePi() {\n  return pi * 2;\n}\n\nfunction TriplePi() {\n  return pi * 3;\n}\n\nexport default pi;\nexport { DoublePi, TriplePi };\n</code></pre> To import in index.jsx: <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as pi from \"./Pi\"\n\nconsole.log(\"Various imported items from pi are\", pi.default, pi.DoublePi(), pi.TriplePi())\n</code></pre> Or alternatively: <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport pi, {DoublePi, TriplePi} from \"./Pi\"\n\nconsole.log(\"Various imported items from pi are\", pi, DoublePi(), TriplePi())\n</code></pre></p> <p>Any name can be used while importing the default export (pi). For non-default ones, the exact names have to be used while importing (DoublePi, TriplePi).</p>"},{"location":"reactflow/","title":"ReactFlow","text":""},{"location":"reactflow/#installation","title":"Installation","text":"<ul> <li>React Flow Installation</li> </ul>"},{"location":"reactflow/#quick-start","title":"Quick Start","text":"<ul> <li>Getting Started with React Flow</li> <li>React Flow Concepts</li> <li>Getting Started with React Flow Vite Template</li> </ul>"},{"location":"reactflow/#play-online","title":"Play Online","text":"<ul> <li>Play Online with React Flow</li> </ul>"},{"location":"reactflow/#tutorials","title":"Tutorials","text":"<ul> <li>Create a Mind Map App with React Flow</li> </ul>"},{"location":"reactflow/#useful-guides","title":"Useful Guides","text":"<ul> <li>Save and Restore</li> </ul>"},{"location":"rust/","title":"Rust","text":""},{"location":"rust/#install","title":"Install","text":"<p>Installation instructions for Rust</p>"},{"location":"rust/#quick-start","title":"Quick Start","text":"<ul> <li>Hello World in Rust</li> </ul>"},{"location":"rust/#courses","title":"Courses","text":"<ul> <li>Getting Started with Rust by Linux Foundation</li> </ul>"},{"location":"solid/","title":"SOLID","text":""},{"location":"solid/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>A class should have only responsibility.</p>"},{"location":"solid/#open-closed-principle-ocp","title":"Open Closed Principle (OCP)","text":"<p>Open for extensions and closed for modifications.</p>"},{"location":"solid/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Base class objects can be replaced by child class object.</p>"},{"location":"solid/#interface-segregation-principle","title":"Interface Segregation Principle","text":"<p>Don't force implementation methods which are not needed/used by child class. Use smaller interfaces.</p>"},{"location":"solid/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>High level modules should not depend on low level modules. Use Abstract layer in between.</p>"},{"location":"sql/","title":"Sql","text":"<p>SQL stands for Structure Query Language. SQL is a programming language that is used to manage relational databases. SQL commands retrieve, create, update, and delete data from a database.</p>"},{"location":"sql/#data-definition-language","title":"Data Definition Language","text":"<p>Data Definition Language commands are used to define and modify database structures.</p> Command Description CREATE DATABASE School Creates a database 'School' DROP DATABASE School Deletes the database 'School' CREATE TABLE Student Creates a table 'Student' ALTER TABLE Student ADD Email NVARCHAR(50) Deletes the database 'Student' DROP DATABASE Student Deletes the database 'Student' DROP DATABASE Student Deletes the database 'Student'"},{"location":"startup/","title":"Startup","text":""},{"location":"startup/#logo-generation","title":"Logo Generation","text":"<p>Looka - Paid.</p>"},{"location":"startup/#evaluating-a-startup-idea","title":"Evaluating a Startup Idea","text":"<ol> <li>How to evaluate your startup idea by Path Forward</li> <li>Lean Canvas</li> <li>Evaluating Startups and Venture Ideas</li> </ol>"},{"location":"startup/#landing-pages","title":"Landing Pages","text":"<ol> <li>https://carrd.co/</li> <li>https://github.com/HugoBlox/theme-landing-page</li> <li>https://github.com/nordicgiant2/awesome-landing-page</li> <li>https://github.com/danmindru/page-ui / pageui.dev</li> <li>https://github.com/PaulleDemon/awesome-landing-pages / https://awesome-landingpages.vercel.app/</li> </ol>"},{"location":"startup/#no-codelow-code-lists","title":"No Code/Low Code Lists","text":"<ol> <li>7 types of NoCode tools for all your startup needs</li> </ol>"},{"location":"startup/#marketplaces","title":"Marketplaces","text":"<ol> <li>Acquire</li> </ol>"},{"location":"system_design/","title":"System Design","text":"<p>Learning how to design scalable systems is an essential trait to become a Software Architect. This article contains a collection of useful links for getting started and to learn more on System Design.</p>"},{"location":"system_design/#system-design-primer","title":"System Design Primer","text":"<p>System Design Primer is one of the most popular Github repo with over 143k stars, which is maintained by Donne Martin. It helps to learn on how to design large scale systems and help in System Design Interviews.</p> <p>Initially browsing the big document might be intimidating but this contains good set of images which makes understanding things easier. Just take things one at a time.  Apart from having the core content, it also walks you through the preparation.</p> <p>Some of the topics this covers are</p> <ul> <li>Index of System Design Topics</li> <li>System Design Solutions for Popular Websites like Dropbox and Google</li> </ul>"},{"location":"system_design/#system-design-by-gaurav-sen","title":"System Design by Gaurav Sen","text":"<p>Gaurav Sen from InterviewReady has a Youtube Channel where he has a series of videos on System Design basics.</p> <p>Youtube Link: System Design Series by Gaurav Sen</p>"},{"location":"system_design/#system-design-cheat-sheet","title":"System Design Cheat Sheet","text":"<p>This is a Github gist article by Vasanth which specifies the steps to be followed by doing a System Design and the key concepts/terminologies that one might need to know.</p>"},{"location":"telemetry/","title":"Telemetry","text":""},{"location":"telemetry/#courses","title":"Courses","text":"<ul> <li>Getting Started with Open Telemetry by Linux Foundation</li> </ul>"},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#code-snippets","title":"Code Snippets","text":"<ol> <li>Code Sandbox</li> <li>Code Pen - Online Code Snippet and Preview</li> <li>CodePly - Online code editor with framework support</li> </ol>"},{"location":"tools/#other-resources","title":"Other Resources","text":"<ol> <li>CSS Button Generator</li> <li>IdiomaticJS - Javascript Style Guide</li> </ol>"},{"location":"uv/","title":"uv","text":""},{"location":"uv/#install","title":"Install","text":"<p>Install via pipx <pre><code>pipx install uv\n</code></pre></p> <p>There are also other alternate installation options</p>"},{"location":"uv/#getting-started","title":"Getting Started","text":"<ul> <li>uv for Virtual Environments</li> <li>uv for Python Installations</li> </ul>"},{"location":"vscode/","title":"VSCode","text":""},{"location":"vscode/#useful-commands","title":"Useful Commands","text":"Description Command Command Palette Ctrl + Shift + P Terminal Ctrl + ~ Collapse All Ctrl + K + 0 Expand All Ctrl + K + J"},{"location":"vscode/#vscode-online","title":"VSCode Online","text":"<p>There is a web/browser version of VS Code which is accessible at vscode.dev.</p>"},{"location":"vscode/#recommended-vscode-extensions","title":"Recommended VSCode Extensions","text":""},{"location":"vscode/#markdown-all-in-one","title":"Markdown All in One","text":"<p>All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more).</p>"},{"location":"wasp/","title":"Wasp","text":""},{"location":"wasp/#install","title":"Install","text":"<ol> <li>Set up WSL for Windows.</li> <li>In WSL, install nvm for managing node installations. <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n</code></pre></li> <li>Install node via nvm (in WSL) <pre><code>nvm install 20\n</code></pre></li> <li>Install wasp (in WSL). <pre><code>curl -sSL https://get.wasp-lang.dev/installer.sh | sh\n</code></pre> If you get a warning stating that '.local/bin' is not on your path, then do the following: <pre><code>nano ~/.bashrc\n</code></pre> Scroll to the end of the file and add the 'export PATH ...' string specified in the wasp installation warning. This would be something like below: <pre><code>export PATH=$PATH:/home/{user}/.local/bin\n</code></pre></li> </ol> <p>Press Ctrl + O to save, then Ctrl + X to exit.</p> <ol> <li>Check wasp installation and addition of path using <pre><code>wasp version\n</code></pre></li> <li>Install wasp VS code extension</li> </ol>"},{"location":"wasp/#quick-start","title":"Quick Start","text":"<p>Instantiate new project using wasp: <pre><code>wasp new\n</code></pre> Choose one of the available templates. Eg: SaaS.</p>"},{"location":"wasp/#open-saas-template-with-wasp","title":"Open SaaS Template with Wasp","text":"<p>https://docs.opensaas.sh/start/getting-started/</p>"},{"location":"wasp/#useful-examples","title":"Useful Examples","text":"<ul> <li>Wasp x Supabase Combo Example</li> </ul>"},{"location":"wasp/#deploy","title":"Deploy","text":"<p>https://wasp-lang.dev/docs/advanced/deployment/overview</p>"},{"location":"wasp/#resources","title":"Resources","text":""},{"location":"website/","title":"Website","text":"<p>This page lists different options that are available to create a static website (like this one). Most of them support markdown and are beginner friendly. Hosting can be done using Github Pages.</p>"},{"location":"website/#unlimited-github-project-sites","title":"Unlimited Github Project Sites","text":"<p>There are three types of GitHub Pages sites: project, user, and organization.</p> <p>Unless you're using a custom domain, user and organization sites are available at http(s)://.github.io or http(s)://.github.io. <p>The source files for a project site are stored in the same repository as their project. Unless you're using a custom domain, project sites are available at http(s)://.github.io/ or http(s)://.github.io/ <p>You can only create one user or organization site for each account on GitHub. Project sites, whether owned by an organization or a personal account, are unlimited. It is possible to configure custom domains for all three.</p> <p>Source: https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites</p>"},{"location":"website/#options","title":"Options","text":"<p>Few popular options are:</p> <ol> <li>Material for MKDocs</li> <li>Docusaurus</li> <li>Jekyll with Github Pages</li> </ol>"},{"location":"website/#discussions","title":"Discussions","text":"<ol> <li>YCombinator Discussion</li> </ol>"},{"location":"website/#alternatives","title":"Alternatives","text":"<ol> <li>Material for MKDocs vs Other Tools</li> <li>Docusaurus vs Other Tools</li> <li>Huge List of Static Site Generators</li> </ol>"},{"location":"writing/","title":"Writing","text":"<p>https://www.coursera.org/learn/sciwrite</p>"},{"location":"wsl/","title":"WSL","text":"<p>WSL stands for Windows Subsystem for Linux. It is a way to use Linux in Windows, like a Windows application.</p>"},{"location":"wsl/#install","title":"Install","text":""},{"location":"wsl/#enable-virtual-machine-platform-wsl-features","title":"Enable Virtual Machine Platform &amp; WSL Features","text":"<p>In PowerShell, run the following command: <pre><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n</code></pre> Restart the system.</p>"},{"location":"wsl/#install-ubuntu-from-windows-store","title":"Install Ubuntu from Windows Store","text":"<p>You can install Ubuntu from Windows Store. There are multiple versions available from which you can choose one among them.  Recommended to use an LTS (Long Term Support).</p> <p>If the installation gets stuck for more than 1 hour in terminal, refer to this issue for workarounds. Using Ctrl + C worked for me.</p>"},{"location":"wsl/#launching-ubuntu","title":"Launching Ubuntu","text":"<ol> <li>After installing, open Ubuntu from Start Menu by searching for <code>Ubuntu</code></li> <li>When opened for the 1st time, it would prompt to set up root (administrator) user name and password. Kindly note that when typing your password, it would not show/display in the terminal but worry not, its being taken.</li> <li>Ubuntu installed this way from Windows Store doesn't have a GUI and has only command line terminal. But it is possible to set up and use VS Code from the Ubuntu environment.</li> </ol>"},{"location":"wsl/#installing-wsl-extension-in-vs-code","title":"Installing WSL Extension in VS Code","text":"<p>Open VS Code in your Windows OS and install WSL extension from Microsoft.</p>"},{"location":"wsl/#setting-up-git-in-wsl","title":"Setting up Git in WSL","text":"<p>You can setup git inside the Ubuntu environment and code/develop from Ubuntu environment.</p>"},{"location":"wsl/#opening-a-folder-from-ubuntu-in-vs-code","title":"Opening a Folder from Ubuntu in VS Code","text":"<ol> <li>Open Ubuntu application from start menu and you can navigate to the folder that you would like to open using <code>cd</code> commands. </li> <li>Once there, you can use <code>code .</code> command to open that folder in VS Code. The dot indicates to open the current directory in VS Code.</li> </ol>"},{"location":"books/","title":"Books","text":"<p>My personal notes and key takeaways from different books that I would like to revisit and always remember.</p>"},{"location":"books/clean_code/","title":"Clean Code","text":"<p>My personal notes and key takeaways from the book 'Clean Code' by Robert C Martin. You can buy the book at Amazon.</p> <p>Measurement of Code Quality</p> <p>The only valid measurement of code quality: WTFs/minute - Thomas Holwerdia</p> <p></p> <p>Learning to write clean code is more of an art that comes with experience, like learning to ride a bicycle. We need to conciously make choices to write cleaner code, reflect on 'bad choices' that we might have made. </p> <p>In a system with bad code, the productivity of the team would decreasing to a point where it reaches almost 0 and the product is dropped. Or it goes for a grand redesign, racing against time to have all features as the old system.</p> <p>The old way to go fast is to keep the code as clean as possible at all times.</p> <p>A programmer with 'code sense' can look at a messy module and see options and variations to make it better. Some of us are born with 'code sense' while some have to fight to acquire it.</p> <p>What is Clean Code?</p> <ul> <li>Clean code is focused - it does one thing well.</li> <li>Clean code can be read and enhanced by a developer other than its original author.</li> <li>Code without tests is not clean.</li> </ul> <p>Time Spent on Reading Code vs Writing Code</p> <p>There is no way to write code without reading the surrounding code. The ratio of time spent reading code versus writing code is well over 10 to 1. So, if you want to go fast, if you want to get done quickly, if you want your code to be easy to write, make it easy to read. - Robert C Martin. </p> <p>The Boy Scout Rule</p> <p>Leave the campground cleaner than you found it. The code has to be kept clean over time and has to be cared for, by refactoring when necessary. Example, change a variable name for the better.</p>"},{"location":"books/clean_code/#meaningful-names","title":"Meaningful Names","text":"<ul> <li>Choose names that reveal intent - why it exists, what it does, how it is used and what is its unit. If a name requires a comment, then it does not reveal its intent.</li> <li>Avoid noninformative names like a1, a2. Instead name them appropriately, like source and destination.</li> <li>Avoid disinformation. Eg: Do not refer to a grouping of accounts as an accountList, unless its actually a list. If the container holding the accounts is not actually a list, it may lead to false conclusions.</li> <li>Avoid noise words. Eg: Data, Info.</li> <li>Distinguish similar variable names so that the reader can know the difference between the two and when to use which one.</li> <li>Use pronounceable names that you tell over a call. Eg: Avoid names like 'genymdhms' (was referring to generation date, year, month, day, hour, minute, second)</li> <li>Prioritize clarity over brevity.</li> <li>Avoid ambiguous or generic names.</li> </ul> <p>Question</p> <p>Uncle Bob suggests to not prefix interfaces with 'I'. Reasoning: I don't want my users knowing that I am handing them an interface. If I need to encode either the interface or the implementation, I choose the implementation. Eg: ShapeFactoryImp is even okay.</p>"},{"location":"books/clean_code/#class-names","title":"Class Names","text":"<p>Question</p> <p>Classes and objects should have noun or noun phrase names like Customer, WikiPage, Account and AddressParser. Avoid words like Manager, Processor, Data or Info in the name of a class. A class name should not be a verb.</p>"},{"location":"books/clean_code/#method-names","title":"Method Names","text":"<ul> <li>Method names should have verb or verb phrases like postPayment, deletePage or save.</li> <li>Accessors should be named for their value and prefixed with get, set and is, as per javaben standard.</li> <li>Pick one word per concept. For example, don't use fetch, retrive and get in different classes. </li> <li>Use solution domain names. Eg: The name 'AccountVisitor' means a great deal to a programmer who is familiar with the Visitor pattern. </li> <li>When there are no solution domain names, use the next best option of going with a name from the problem domain. </li> </ul>"},{"location":"books/clean_code/#functions","title":"Functions","text":"<ul> <li>Keep functions as small and focused as possible. </li> <li>Ideally lesser than 10 lines. Should not be more than 20 lines - if so, break them down.</li> <li>Follow the Single Responsibility Principle.</li> <li>Aim for functions to do one thing well.</li> <li>We want the code to read like a top-down narrative.</li> </ul> <p>Maintaining Level of Abstraction or Depth</p> <p>Function calls next to each other should be at the same level of abstraction or depth. It should not be mix and match of high level function calls and low level function calls of various levels.</p>"},{"location":"books/clean_code/#comments","title":"Comments","text":"<ul> <li>Write necessary comments for clarification.</li> <li>Avoid redundant comments stating the obvious.</li> </ul>"},{"location":"books/clean_code/#formatting","title":"Formatting","text":"<ul> <li>Maintain consistent code formatting.</li> <li>Use indentation, spacing, and line breaks effectively.</li> </ul>"},{"location":"books/clean_code/#avoid-duplication","title":"Avoid Duplication","text":"<ul> <li>Refactor to eliminate code duplication.</li> <li>Use functions or classes for common logic.</li> </ul>"},{"location":"books/clean_code/#function-arguments","title":"Function Arguments","text":"<ul> <li>Limit the number of function arguments (ideally, three or fewer).</li> <li>Avoid flags or boolean parameters.</li> </ul>"},{"location":"books/clean_code/#error-handling","title":"Error Handling","text":"<ul> <li>Use exceptions for exceptional cases.</li> <li>Provide informative and actionable error messages.</li> </ul>"},{"location":"books/clean_code/#testing","title":"Testing","text":"<ul> <li>Write comprehensive tests for code validation.</li> <li>Follow the Arrange-Act-Assert (AAA) pattern.</li> </ul>"},{"location":"books/clean_code/#class-design","title":"Class Design","text":"<ul> <li>Keep classes small and focused.</li> <li>Follow the Single Responsibility Principle.</li> <li>Aim for cohesion within a class.</li> </ul>"},{"location":"books/clean_code/#readability","title":"Readability","text":"<ul> <li>Write code as if for beginners.</li> <li>Prioritize readability over cleverness.</li> </ul>"},{"location":"books/clean_code/#dependency-management","title":"Dependency Management","text":"<ul> <li>Minimize dependencies between modules and classes.</li> <li>Favor Dependency Inversion Principle.</li> </ul>"},{"location":"books/clean_code/#continuous-refactoring","title":"Continuous Refactoring","text":"<ul> <li>Regularly revisit and improve code.</li> <li>Don't postpone refactoring; it's an ongoing process.</li> </ul>"},{"location":"books/impact_players/","title":"Impact Players","text":"<p>These are my book notes of the book 'Impact Players' by Liz Wiseman.</p>"},{"location":"books/impact_players/#who-are-impact-players","title":"Who are Impact Players?","text":"<p>In every organization there are Impact Players - those indispensable colleagues who can be counted on in critical situations and who consistently receive high profile assignments and new opportunities. Managers know who these top players are, whether they are center stage or behind the scenes and want more of them on their team. </p>"},{"location":"books/impact_players/#impact-player-mindset","title":"Impact Player Mindset","text":"<p>Wiseman explains what the most influential leaders are doing differently; how small and seemingly insignificant differences in the way we think and act can make an enormous impact; and why - with little coaching - this mindset is available to everyone who wants to perform at their peak.</p> <ol> <li>While others do their job, Impact Players figure out the real job to be done.</li> <li>While others wait for direction, Impact Players step up and lead.</li> <li>While others escalate problems, Impact Players move things across the finish line.</li> <li>While others attempt to minimize change, Impact Players are learning and adapting to change.</li> <li>While others add to the load, Impact Players make heavy demands feel lighter.</li> </ol>"},{"location":"books/impact_players/#what-does-your-user-really-care-about","title":"What does your user really care about?","text":"<p>Here is an example for #1 - corporate training world usually operated on training more people. Reports were sent to executives on how many trainings had been conducted and how many attended. These reports were largely ignored. Ben, one of the training directors stepped back and asked - what do the executives really care about? When Ben put himself in the executive's shoes, he realized that he wouldn't really care how much training people attended; he would care about how ready they were to work with customers to sell and support new products. Instead of training attendance, he introduced a readiness metric with self study and certifications and improved the training plan. Senior executives were now actively engaged because Ben was making it easier for them to do their jobs.</p>"},{"location":"books/never_split_the_difference/","title":"Never Split the Difference","text":"<p>These are my book notes of the book 'Never Split the Difference' by Chris Voss.</p>"},{"location":"books/never_split_the_difference/#new-rules","title":"New Rules","text":"<p>Asking simple, open ended calibrated questions - the ones that the other side can respond to but have no fixed answers. It gives the other person the illusion of control, without giving them any idea of how constrained they are by it. - How am I supposed to do that? - I am really sorry, how do I know he's even alive?</p> <p>While I wasn't atually saying 'No', the questions I kept asking sounded like that. They indicated that the other side was being dishonest and unfair, which made the other side to negotiate with themselves. I keep asking the same 3 to 4 open ended questions and the other person get worn out answering and give me everything I want.</p> <p>At the end of the day, humans are all crazy, irrational, impulsive, emotionally driven animals, all the raw intelligence and mathematical logic in the world is little help.</p> <p>As per the book - 'Getting to Yes', separate the person - the emotion from the problem, two, don't get wrapped up in other side's position (what they are asking for) but instead focus on their interests (why they are asking for it) so that you can find what they really want, three, work together to get to win-win options and four, establish mutually agreed-upon standards for evaluating those possible solutions. This was under the assumption that humans understand and act rationally and selfishly to maximize their position.</p> <p>This baffled Kahneman, author of 'Thinking Fast and Slow', who said, 'It is evident that people are neither fully rational nor completely selfish and their tastes are anything but stable'.</p>"},{"location":"books/never_split_the_difference/#be-a-mirror","title":"Be a Mirror","text":""},{"location":"books/never_split_the_difference/#dont-feel-thier-pain-label-it","title":"Don't Feel thier Pain, Label it","text":""},{"location":"books/never_split_the_difference/#beware-yes-master-no","title":"Beware 'Yes' - Master 'No'","text":""},{"location":"books/never_split_the_difference/#trigger-the-two-words-that-immediately-transform-any-negotiation","title":"Trigger the Two Words that Immediately Transform Any Negotiation","text":""},{"location":"books/never_split_the_difference/#bend-their-reality","title":"Bend their Reality","text":""},{"location":"books/never_split_the_difference/#create-the-illusion-of-control","title":"Create the Illusion of Control","text":""},{"location":"books/never_split_the_difference/#guarantee-execution","title":"Guarantee Execution","text":""},{"location":"books/never_split_the_difference/#bargain-hard","title":"Bargain Hard","text":""},{"location":"books/never_split_the_difference/#find-the-black-swan","title":"Find the Black Swan","text":""},{"location":"cook/","title":"Cook","text":"<p>Testing.</p>"},{"location":"csharp/","title":"CSharp","text":""},{"location":"csharp/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<ol> <li>Install C# Extension for VS Code</li> <li>Check if .NET SDK is installed using the command <code>dotnet --version</code> in terminal. Install .NET SDK, if not already installed. </li> <li>To create new .NET console project from VSCode, use <code>dotnet new console</code> command in the terminal. To see list of available templates, use the command <code>dotnet new list</code></li> </ol>"},{"location":"csharp/#c-vs-code-extensions","title":"C# VS Code Extensions","text":"<ol> <li>C# Dev Kit</li> <li>.NET Extension Pack</li> <li>C# Extensions by JosKreativ</li> <li>NuGet Gallery</li> </ol>"},{"location":"csharp/#run","title":"Run","text":"<ol> <li>To run the code, use the command <code>dotnet run</code> in the terminal. Or use F5 or Ctrl + F5.</li> <li>If you are trying to run a webservice and getting error with htttps, run the command <code>dotnet dev-certs https --trust</code> for the computer to prompt if you want to trust the dev certificate. Confirm the choice.</li> <li>If you are running into any issues like the webapi service not showing up properly in browser, try the command <code>dotnet watch run</code>.</li> </ol>"},{"location":"csharp/#learning","title":"Learning","text":"<ol> <li>Foundational C# by FreeCodeCamp</li> <li>Microsoft Learn - Get Started with C#</li> <li>Microsoft Learn - Build .NET Web API with C#</li> <li>Microsoft Learn - Build Web Apps with Blazor</li> </ol>"},{"location":"csharp/#design-patterns","title":"Design Patterns","text":"<ol> <li>C# Design Patterns by DoFactory</li> <li>ASP.NET MVC Solution Architecture \u2013 Best Practices</li> </ol>"},{"location":"csharp/#coding-standards","title":"Coding Standards","text":"<p>C# Coding Standards and Best Practices by DoFactory</p>"},{"location":"csharp/#examples","title":"Examples","text":"<p>C# Code Examples</p>"},{"location":"csharp/#shortcuts","title":"Shortcuts","text":"<p>Visual Studio C# Shortcuts</p>"},{"location":"csharp/#paid-courses","title":"Paid Courses","text":"<ol> <li>C# Design Patterns by Dmitri Nesteruk</li> </ol>"},{"location":"csharp/webapi/","title":"Webapi","text":""},{"location":"csharp/webapi/#help","title":"Help","text":"<p><code>dotnet new webapi --help</code></p>"},{"location":"csharp/webapi/#create-project","title":"Create Project","text":"<p>To use controllers style project, use below command: <code>dotnet new webapi --use-controllers</code></p> <p>To specify a subfolder for creating the project, use: <code>dotnet new webapi -o &lt;subfolder name&gt;</code></p>"},{"location":"csharp/webapi/#run","title":"Run","text":"<p>To run, use the below commnad, which would start the service and open the swagger UI in the default browser: <code>dotnet watch run</code></p> <p>Alternatively, you can use <code>dotnet run</code> to start the service. But you need to know the exact swagger UI URL to open in browser. Just opening the root domain, will not show up swagger and would result in 404 - webpage not found error.</p>"},{"location":"csharp/webapi/#vs-code-commands","title":"VS Code Commands","text":"Command Description prop + Tab Creates a placeholder integer property within the class ctor + Tab Creates a placeholder constructor within the class"},{"location":"csharp/webapi/#courses","title":"Courses","text":"<ol> <li>ASP.NET Web API .NET 8 Tutorial 2024</li> </ol>"},{"location":"git/","title":"Git","text":"<p>Git is a distributed version control system that are used for tracking changes in files and sharing those with team members. </p> <p>It is like a time machine for your computer files. It keeps track of every change you make, allowing you to go back to any point in time. It's great for teamwork, ensuring everyone works on the same version without stepping on each other's toes.</p>"},{"location":"git/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<p>For installing and setup, please refer to xTLDR Git Setup</p>"},{"location":"git/#git-commands","title":"\ud83d\udda5\ufe0f Git Commands","text":"Command Description git --version Get version of git installed in the system git help [command] Get help for the git command. Eg: git help clone"},{"location":"git/#repository-commands","title":"\u27a1\ufe0f Repository Commands","text":"Command Description git init Initialize an existing directory as a repository git clone [url] Clone a remote repository to a local system git pull Fetches changes from remote and merges local branch git push Push local changes to remote"},{"location":"git/#make-changes-and-commit","title":"\u27a1\ufe0f Make Changes and Commit","text":"Command Description git add [file] Adds a file to staging from where you can commit git add . Add all modified files to staging git reset [file] Unstage a file from staging. Changes will be retained in working directory git restore . Discard changes in modified files (excludes those in staging) git clean -d --dry-run Dry run. Show list of files that would be removed with clean. -d recurses through directories git clean -df Force remove untracked files from repository, including subdirectories git commit -m \"commit message\" Makes a commit from the changes in staging git stash Stashes the local changes, both staged and unstaged, and goes back to last commit git stash pop Reapply the previously stashed changes"},{"location":"git/#branching-and-merging","title":"\u27a1\ufe0f Branching and Merging","text":"Command Description git branch List all branches. * denotes the active branch git branch [branch-name] Create a branch with the provided name git checkout [branch-name] Switch to a different branch. Use -b to create and checkout branch git merge [branch-name] Merges provided branch into active branch. Do <code>git pull</code> before merge to get the changes committed by other users. git merge --abort Aborts the current merge."},{"location":"git/#status","title":"\u27a1\ufe0f Status","text":"Command Description git status Displays the active branch and list of local changes git log --oneline --graph --decorate [-n count] Displays last n commits of the active branch"},{"location":"git/#cheatsheets","title":"\ud83d\udcd1 Cheatsheets","text":"<ul> <li>Git Cheatsheet by Github</li> <li>Git Cheatsheet by Gitlab</li> <li>Git Cheatsheet by Freecodecamp</li> </ul>"},{"location":"git/#typical-flow","title":"\ud83d\udee4\ufe0fTypical Flow","text":"<p>Typical steps to contribute to an open source repository:</p> <ol> <li>Create a fork of the repo under your account</li> <li>Clone the above fork in your PC <pre><code>git clone [url]\n</code></pre></li> <li>Create and checkout a new branch <pre><code>git branch [your-new-branch-name]\ngit checkout [your-new-branch-name]\n</code></pre></li> <li>Make changes and commit with your signature <pre><code>git commit -s -m [your commit message]\n</code></pre></li> <li>Push branch to your online repo <pre><code>git push -u origin [your-new-branch-name]\n</code></pre></li> <li>Create a pull request with your new branch in the open source repository.</li> </ol>"},{"location":"git/#advanced","title":"\ud83e\uddd9\u200d\u2642\ufe0f Advanced","text":""},{"location":"git/#binary-merge-conflicts","title":"\u27a1\ufe0f Binary Merge Conflicts","text":"<p>If you don't have options to resolve merge conflicts for binary files, you would want to choose to go with the version in one of the branches.</p> <p>To go with \"your\" version (the version in active branch): <pre><code>git checkout --ours [file-name]\ngit add [file-name]\n</code></pre></p> <p>To go with \"their\" version (the branch which you are merging changes from, to the active branch): <pre><code>git checkout --theirs [file-name]\ngit add [file-name]\n</code></pre> For usage with all files, use <code>.</code> instead of file-name.</p> <p>To better understand ours vs theirs, refer to git ours vs theirs</p>"},{"location":"git/#partial-merge","title":"\u27a1\ufe0f Partial Merge","text":"<p>If you want to merge selective files from one branch into another, you can use the command, which will perform the merge, add items to staging but not make the commit. You can then reset the changes for files you don't want and then make the commit.</p> <pre><code>git merge [branch-name] --no-commit --no-ff\n# Now all changes from the branch are in staging, but not committed yet\n# Use git reset to discard files you don't want in the merge\ngit reset [file-name-1]\ngit reset [file-name-2]\n# Once done, make the commit\ngit commit\n</code></pre>"},{"location":"git/setup/","title":"Git Setup","text":""},{"location":"git/setup/#install-git-in-your-pc","title":"\ud83d\udee0\ufe0f Install Git in Your PC","text":"<p>Download and install git</p> <p>Warning</p> <p>This page is my rough notes. It is too lengthy and has to be rewritten.</p>"},{"location":"git/setup/#pc-setup","title":"\ud83d\udee0\ufe0f PC Setup","text":""},{"location":"git/setup/#generate-ssh-key","title":"Generate SSH Key","text":"<ol> <li>Open Git Bash from Start Menu.</li> <li>Check if there are SSH keys already in your system under \".ssh\" folder, using below command in git bash. The \"-al\" argument is for listing all files, with a separate line for each file name.   <pre><code>ls -al ~/.ssh\n</code></pre></li> <li>If you see that a SSH key has already been created for the account that you want, you can skip this section and move to the next section.</li> <li>If you got an error saying that the .ssh folder doesn't exist, create it using below command.   <pre><code>mkdir .ssh\n</code></pre></li> <li>Switch to the .ssh folder.   <pre><code>cd .ssh\n</code></pre></li> <li>Create a SSH key in your system using below command. This command uses \"rsa\" algorithm, uses 4096 bits and uses email address as comment. Replace the email address with your email address.   <pre><code>ssh-keygen -t rsa -b 4096 -C youremail@example.com\n</code></pre></li> <li>This would prompt for a file name. \"id_rsa\" would be the default file name. For using multiple accounts, its recommended to use an identifier along with the default name. Give a name that you can easily associate with the account. Eg: id_rsa_ <li>It would now prompt for a passphrase. Press enter twice if you would like to skip providing a passphrase.</li> <li>These steps now would have created the public and private key in the \".ssh\" folder. You can use <code>ls</code> command to list the files in the current directory and verify.</li>"},{"location":"git/setup/#add-your-private-ssh-key-to-ssh-agent","title":"Add Your Private SSH Key to SSH Agent","text":"<p>(May be, below are not needed. Need to confirm) 1. Ensure that you are in \".ssh\" folder by checking the present working directory command. <pre><code>pwd\n</code></pre> This would output something like <code>/c/Users/&lt;user_name&gt;/.ssh</code> 2. If you are not yet in the .ssh folder, use change directory to go to the \".ssh\" folder. <pre><code>cd .ssh\n</code></pre> 3. Start SSH Agent using below command. <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> 4. Add your SSH private key file, whose file name you had provided in the previous section.  <pre><code>ssh-add id_rsa_&lt;git_username&gt;\n</code></pre></p>"},{"location":"git/setup/#add-your-public-ssh-key-to-github","title":"Add Your Public SSH Key to GitHub","text":"<ol> <li>The ssh keys that you have created would be at <code>C:\\Users\\&lt;user_name&gt;\\.ssh</code></li> <li>Go to above location and open the *.pub file in a text editor, which is your public key. Copy the contents of above file. </li> <li>Add your public SSH key to git settings. <ol> <li>For example, for github, it is https://github.com/settings/keys. Click on New SSH key. </li> <li>Give a name for your PC and paste the SSH key contents.</li> </ol> </li> </ol>"},{"location":"git/setup/#add-identity-keys-to-ssh-config-file","title":"Add Identity Keys to SSH Config File","text":"<p>If you had opted to save the file with a custom name other than \"id_rsa\", you need to add those file names to .ssh config file. The file needs to be created at below location without any extension: <pre><code>C:\\Users\\&lt;user_name&gt;\\.ssh\\config\n</code></pre> In this file, add below contents, one line for id_rsa file that you have created: <pre><code>IdentityFile ~/.ssh/id_rsa_git_username_1\nIdentityFile ~/.ssh/id_rsa_git_username_2\n</code></pre></p>"},{"location":"git/setup/#override-user-name-and-email-for-each-repo","title":"Override User Name and Email for Each Repo","text":"<p>By default, git would use the global user name and email for all repositories. To view the global user name and email configuration, you can use the below command: <pre><code>git config --global -l\n</code></pre> If you would like to use a different user name or email for a particular repo, you can override it for each repository using below commands using git bash from your repository directory: <pre><code>git config --local user.name your_name\ngit config --local user.email your_name@domain.com\n</code></pre></p>"},{"location":"git/setup/#sign-your-commits","title":"Sign your Commits","text":"<p>If you get <code>gpg: signing failed: No secret key error: gpg failed to sign the data</code>, do the below steps: -   List the secret keys available in GPG.   <pre><code>gpg --list-secret-keys --keyid-format=long\n</code></pre> -   Copy your key and set using below command:   <pre><code>git config --local user.signingkey your_key\n</code></pre> Use --global if you would like to apply this for systemwide.</p>"},{"location":"git/setup/#multiple-git-profiles","title":"Multiple Git Profiles","text":"<p>To setup multiple git profiles in a system, refer to below links. - Git Conditional Configuration - Setup Case Insensitive Matching</p>"}]}